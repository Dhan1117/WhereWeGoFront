/* global google */

// src/pages/SurveyPage.jsx
import React, { useEffect, useState, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { Loader } from "@googlemaps/js-api-loader";
import {
  Alert, Box, Button, ButtonGroup, Card, CardActions, CardContent, CardHeader,
  Chip, CircularProgress, LinearProgress, Container, Divider, FormControl, Grid,
  IconButton, InputLabel, MenuItem, Select, Snackbar,
  Stack, Stepper, Step, StepLabel, Tooltip, Typography,
  Skeleton, Badge, MobileStepper, Paper, useMediaQuery
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import LoginIcon from "@mui/icons-material/Login";
import GoogleIcon from "@mui/icons-material/Google";
import ChatBubbleIcon from "@mui/icons-material/ChatBubble";
import HowToVoteIcon from "@mui/icons-material/HowToVote";
import LogoutIcon from "@mui/icons-material/Logout";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import ErrorIcon from "@mui/icons-material/Error";
import ScienceIcon from "@mui/icons-material/Science";
import SendIcon from "@mui/icons-material/Send";
import ChecklistIcon from "@mui/icons-material/Checklist";
import PendingIcon from "@mui/icons-material/Pending";
import PlaceIcon from "@mui/icons-material/Place";
import { Search as SearchIcon, ArrowBack, ArrowForward } from "@mui/icons-material";
import { AnimatePresence, motion } from "framer-motion";

// UA Í∏∞Î∞ò Í∞êÏßÄ
import { isMobile as isMobileUA, isAndroid, isIOS } from "react-device-detect";

/* ==========================================================================
   ÌôòÍ≤Ω Î≥ÄÏàò / ÏÉÅÏàò
   ========================================================================== */
const API_PREFIX =
  process.env.REACT_APP_API_PREFIX ||
  (typeof import.meta !== "undefined" &&
    import.meta.env &&
    import.meta.env.VITE_API_PREFIX) ||
  "http://localhost:8000";
const API_BASE = `${API_PREFIX.replace(/\/$/, "")}/api/v1`;
const GOOGLE_LOGIN_URL = `${API_BASE}/auth/google/login`;
const KAKAO_LOGIN_URL = `${API_BASE}/auth/kakao/login`;
const GMAPS_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || "";

// Î°úÏª¨ Í¥ÄÎ¶¨Ïûê Ïö∞Ìöå ÌîåÎûòÍ∑∏ ÌÇ§
const BYPASS_KEY = "wwg_admin_bypass";

/* ==========================================================================
   ÌåîÎ†àÌä∏
   ========================================================================== */
const tone = {
  primary: "#4338CA",
  primarySoft: "#EEF2FF",
  accent: "#0D9488",
  paper: "#ffffff",
  subtle: "#F7F7FB",
  border: "#E6E8EF",
  cardGrad: "linear-gradient(135deg, #F9FAFB 0%, #EEF2FF 40%, #ECFEFF 100%)",
};

/* ==========================================================================
   Ïú†Ìã∏
   ========================================================================== */
const toNum = (v) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
};

const normalizeMlSpot = (p, i = 0) => {
  const primaryId = p?.item_id || p?._id || p?.content_id || p?.id || p?.ml_index || (i + 1);
  return {
    id: String(primaryId),
    item_id: p?.item_id ? String(p.item_id) : undefined,
    _id: p?._id ? String(p._id) : undefined,
    name: p?.item_name || p?.name || "(Ïù¥Î¶Ñ ÏóÜÏùå)",
    category_type: p?.category_type ?? p?.categoryType ?? null,
    address: p?.address || p?.road_address || "",
    lat: toNum(p?.lat ?? p?.latitude ?? p?.y),
    lng: toNum(p?.lng ?? p?.longitude ?? p?.x),
    category: p?.category || p?.category_type || "",
    rating: typeof p?.rating === "number" ? p.rating : null,
    image:
      p?.photoUrl ||
      p?.image ||
      (p?.photo_reference
        ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photo_reference=${encodeURIComponent(
          p.photo_reference
        )}&key=${GMAPS_KEY}`
        : PLACEHOLDER_URL),
    ml_score: typeof p?.score === "number" ? p.score : null,
    reason: p?.reason || "",
    source: "ml",
  };
};

async function apiCall(url, options = {}) {
  const body = options.body ? JSON.stringify(options.body) : undefined;
  const res = await fetch(url, {
    method: options.method || "GET",
    credentials: "include",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
      ...(options.headers || {}),
    },
    body,
  });
  if (res.status === 204) return {};
  if (!res.ok) {
    let errDetail = `HTTP ${res.status}`;
    try {
      const err = await res.json();
      errDetail = err.detail || err.message || errDetail;
    } catch { }
    throw new Error(errDetail);
  }
  try {
    return await res.json();
  } catch {
    return {};
  }
}

/* ==========================================================================
   Ïù¥ÎØ∏ÏßÄ Ìó¨Ìçº
   ========================================================================== */
const PLACEHOLDER_SVG = `
<svg xmlns='http://www.w3.org/2000/svg' width='1200' height='675' viewBox='0 0 1200 675'>
  <defs>
    <linearGradient id='g' x1='0' x2='1' y1='0' y2='1'>
      <stop offset='0%' stop-color='#eef2f7'/>
      <stop offset='100%' stop-color='#e5ecf5'/>
    </linearGradient>
  </defs>
  <rect width='1200' height='675' fill='url(#g)'/>
  <g fill='none' stroke='#9aa4b2' stroke-width='28' stroke-linecap='round' stroke-linejoin='round'>
    <rect x='170' y='140' width='860' height='460' rx='32'/>
    <circle cx='410' cy='340' r='70'/>
    <path d='M220 570l230-230 150 150 140-190 240 270z'/>
  </g>
</svg>`;
const PLACEHOLDER_URL = `data:image/svg+xml;utf8,${encodeURIComponent(PLACEHOLDER_SVG)}`;

function extractPhotoUrl(place) {
  const first = (arr) => (Array.isArray(arr) && arr.length ? arr[0] : null);
  const candidates = [
    place?.photoUrl, place?.image, place?.thumbnail, place?.coverImage, place?.cover,
    place?.img, place?.picture, place?.mainImage, first(place?.images), first(place?.image_urls),
    place?.photo_url, place?.img_url, place?.image_url, first(place?.photos)?.url || first(place?.photos)?.photoUrl,
  ].filter(Boolean);
  if (candidates.length) return candidates[0];

  const photoRef =
    place?.photo_reference ||
    place?.photoReference ||
    (first(place?.photos)?.photo_reference ?? first(place?.photos)?.photoReference);
  if (photoRef && GMAPS_KEY) {
    return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photo_reference=${encodeURIComponent(
      photoRef
    )}&key=${GMAPS_KEY}`;
  }
  return "";
}

/* ==========================================================================
   Google Places: ÎùºÏö¥Îìú Ïπ¥Îìú Ïù¥ÎØ∏ÏßÄ Î≥¥Í∞ï
   ========================================================================== */
async function augmentRoundImages(rounds) {
  if (!GMAPS_KEY) return rounds;

  const loader = new Loader({
    apiKey: GMAPS_KEY,
    libraries: ["places"],
    region: "KR",
    language: "ko",
  });
  await loader.load();

  const mapDiv = document.createElement("div");
  const service = new window.google.maps.places.PlacesService(mapDiv);
  const BUSAN_CENTER = { lat: 35.1796, lng: 129.0756 };

  const next = rounds.map((r) => ({
    ...r,
    primary: r.primary ? { ...r.primary } : null,
    alternative: r.alternative ? { ...r.alternative } : null,
  }));

  const fillPhoto = async (spot) => {
    if (!spot) return;
    const already =
      spot.image &&
      !/^data:image/i.test(spot.image) &&
      !/placeholder/i.test(spot.image);
    if (already) return;

    const q = (spot.name || "").trim();
    if (!q) return;

    const place = await new Promise((resolve) => {
      service.textSearch(
        {
          query: `Î∂ÄÏÇ∞ ${q}`,
          location: new window.google.maps.LatLng(BUSAN_CENTER.lat, BUSAN_CENTER.lng),
          radius: 50000,
          language: "ko",
        },
        (results) => resolve(Array.isArray(results) && results.length ? results[0] : null)
      );
    });
    if (!place?.place_id) return;

    const details = await new Promise((resolve) => {
      service.getDetails(
        { placeId: place.place_id, language: "ko", fields: ["photos"] },
        (d) => resolve(d || null)
      );
    });

    const url = details?.photos?.[0]?.getUrl({ maxWidth: 1200, maxHeight: 900 });
    if (url) spot.image = url;
  };

  for (const r of next) {
    await fillPhoto(r.primary);
    await fillPhoto(r.alternative);
  }
  return next;
}

/* ==========================================================================
   Ïï†ÎãàÎ©îÏù¥ÏÖò
   ========================================================================== */
const pageVariants = {
  initial: { opacity: 0, y: 24, scale: 0.98 },
  in: { opacity: 1, y: 0, scale: 1 },
  out: { opacity: 0, y: -20, scale: 0.98 },
};
const pageTransition = { type: "spring", stiffness: 260, damping: 24 };

// Ïä§ÌÖù: Î°úÍ∑∏Ïù∏, ÏÑ§Î¨∏, Ìà¨Ìëú, AI Ï∂îÏ≤ú (Step4/Step5 Ï†úÍ±∞)
const steps = ["Î°úÍ∑∏Ïù∏", "ÏÑ§Î¨∏", "Ìà¨Ìëú", "AI Ï∂îÏ≤ú"];

const cardEnter = {
  hidden: { opacity: 0, scale: 0.96, y: 12 },
  show: { opacity: 1, scale: 1, y: 0, transition: { type: "spring", stiffness: 220, damping: 18 } },
};
const cardTap = { whileTap: { scale: 0.98 } };
const selectedPulse = {
  animate: { boxShadow: ["0 0 0 0px rgba(13,148,136,0.45)", "0 0 0 16px rgba(13,148,136,0)"] },
  transition: { duration: 1.25, repeat: Infinity, ease: "easeOut" },
};

/* ==========================================================================
   Í≥µÏö© Ïª¥Ìè¨ÎÑåÌä∏
   ========================================================================== */
const DetailTooltipTitle = (p) => (
  <Box sx={{ p: 0.5 }}>
    <Typography variant="subtitle2" fontWeight={700}>{p?.name || "Ïù¥Î¶Ñ ÏóÜÏùå"}</Typography>
    <Typography variant="caption">üìç {p?.address || "-"}</Typography><br />
    <Typography variant="caption">üè∑Ô∏è {p?.category || "-"}</Typography><br />
    <Typography variant="caption">‚≠ê {p?.rating ?? "N/A"}</Typography>
    {p?.description && (
      <>
        <Divider sx={{ my: 0.5 }} />
        <Typography variant="caption" sx={{ whiteSpace: "pre-wrap" }}>{p.description}</Typography>
      </>
    )}
  </Box>
);

function BigChoiceCardInner({ label, place, selected, onSelect, compact = false, disabled = false }) {
  const [src, setSrc] = React.useState("");
  const [imgLoaded, setImgLoaded] = React.useState(false);

  React.useEffect(() => {
    const url = extractPhotoUrl(place) || PLACEHOLDER_URL;
    setImgLoaded(false);
    setSrc(url);
  }, [place]);

  const handleSelect = React.useCallback(() => {
    if (!disabled) onSelect();
  }, [disabled, onSelect]);

  return (
    <Badge
      invisible={!selected}
      overlap="circular"
      anchorOrigin={{ vertical: "top", horizontal: "left" }}
      badgeContent={
        <Chip
          label="ÏÑ†ÌÉùÎê®"
          color="success"
          size="small"
          sx={{ fontWeight: 700, fontSize: { xs: "0.65rem", sm: "0.75rem" } }}
        />
      }
      sx={{ width: "100%" }}
    >
      <motion.div variants={cardEnter} initial="hidden" animate="show" {...cardTap} style={{ width: "100%" }}>
        <motion.div {...(selected ? selectedPulse : {})} style={{ borderRadius: 20 }}>
          <Card
            role="button"
            tabIndex={0}
            aria-disabled={disabled}
            onKeyDown={(e) => !disabled && ((e.key === "Enter" || e.key === " ") && handleSelect())}
            variant="outlined"
            onClick={handleSelect}
            sx={{
              outline: "none",
              borderWidth: 2,
              borderColor: selected ? tone.accent : tone.border,
              cursor: disabled ? "not-allowed" : "pointer",
              position: "relative",
              transition: "all .2s",
              background: tone.cardGrad,
              minHeight: compact ? { xs: 220, sm: 260 } : { xs: 280, md: 360 },
              display: "flex",
              flexDirection: "column",
              "&:hover": disabled ? {} : {
                borderColor: tone.primary,
                transform: "translateY(-2px)",
                boxShadow: "0 12px 30px rgba(0,0,0,0.06)",
              },
              ...(selected && { boxShadow: `0 0 0 3px ${tone.accent}33 inset` }),
            }}
          >
            <CardContent sx={{ p: compact ? { xs: 1.5, sm: 2 } : { xs: 2, sm: 2.5, md: 3 }, flex: 1 }}>
              <Stack direction="row" alignItems="flex-start" spacing={{ xs: 0.75, sm: 1.25 }} sx={{ mb: { xs: 0.75, sm: 1 } }}>
                <PlaceIcon sx={{ color: tone.primary, mt: "3px", fontSize: { xs: 18, sm: 22 }, pointerEvents: "none" }} />
                <Box sx={{ flex: 1, minWidth: 0 }}>
                  <Typography variant="h6" fontWeight={900} noWrap sx={{ fontSize: { xs: "0.95rem", sm: "1.1rem" } }}>
                    {compact ? label + " ¬∑ " : ""}{place?.name || "-"}
                  </Typography>
                  <Typography variant="body2" sx={{ opacity: 0.9, fontSize: { xs: "0.75rem", sm: "0.9rem" } }} noWrap>
                    üìç {place?.address || "-"}
                  </Typography>
                  <Typography variant="body2" sx={{ opacity: 0.8, fontSize: { xs: "0.75rem", sm: "0.9rem" } }} noWrap>
                    üè∑Ô∏è {place?.category || "-"} ¬∑ ‚≠ê {place?.rating ?? "N/A"}
                  </Typography>
                </Box>

                <Tooltip title={DetailTooltipTitle(place)} arrow placement="left" componentsProps={{ tooltip: { sx: { maxWidth: 320 } } }}>
                  <span>
                    <IconButton
                      type="button"
                      size="small"
                      onClick={(e) => e.stopPropagation()}
                      aria-label="ÏÉÅÏÑ∏Î≥¥Í∏∞"
                      sx={{ p: { xs: 0.5, sm: 0.75 } }}
                    >
                      <SearchIcon sx={{ fontSize: { xs: "1rem", sm: "1.25rem" } }} />
                    </IconButton>
                  </span>
                </Tooltip>
              </Stack>

              <Box
                onClick={handleSelect}
                sx={{
                  mt: { xs: 0.75, sm: 1.25 },
                  borderRadius: { xs: 1.5, sm: 2.5 },
                  overflow: "hidden",
                  bgcolor: "#eef2f7",
                  position: "relative",
                  aspectRatio: "16/9",
                  cursor: disabled ? "not-allowed" : "pointer",
                }}
              >
                {!imgLoaded && (
                  <Skeleton
                    variant="rectangular"
                    width="100%"
                    height="100%"
                    sx={{ position: "absolute", inset: 0, pointerEvents: "none" }}
                  />
                )}
                <img
                  src={src}
                  alt={place?.name || "place"}
                  loading="lazy"
                  referrerPolicy="no-referrer"
                  style={{ display: imgLoaded ? "block" : "none", width: "100%", height: "100%", objectFit: "cover" }}
                  onLoad={() => setImgLoaded(true)}
                  onError={(e) => { e.currentTarget.src = PLACEHOLDER_URL; setImgLoaded(true); }}
                />
              </Box>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </Badge>
  );
}
const BigChoiceCard = React.memo(BigChoiceCardInner);

/* ==========================================================================
   Î©îÏù∏ Ïª¥Ìè¨ÎÑåÌä∏
   ========================================================================== */
export default function SurveyPage() {
  const navigate = useNavigate();
  const theme = useTheme();
  // ML ÏûêÎèô Î°úÎî© TIP/ÏßÑÌñâ
  const [mlLoading, setMlLoading] = useState(false);
  const [mlProgress, setMlProgress] = useState(0);
  const [mlTipIdx, setMlTipIdx] = useState(0);

  // Î°úÎî© ÌôîÎ©¥ TIP (Ï†úÎ™©ÏùÄ "Í∑∏Í±∞ ÏïÑÏÖ®ÎÇòÏöî?"Ïù¥ÏßÄÎßå, Î≥∏Î¨∏ ÎÅùÏùò "‚Ä¶ÏïÑÏÖ®ÎÇòÏöî?"Îäî Ï†úÍ±∞)
// Î°úÎî© ÌôîÎ©¥ TIP (Î∂ÄÏÇ∞ Í¥ÄÍ¥ëÏßÄ Ìù•ÎØ∏Î°úÏö¥ ÏÇ¨Ïã§)
const LOADING_TIPS = [
  "Í∞êÏ≤úÎ¨∏ÌôîÎßàÏùÑÏùÄ ÏÉâÏÉâÏùò ÏßëÎì§Ïù¥ ÏÇ∞ÎπÑÌÉàÏóê ÎäòÏñ¥ÏÑ† ÏòàÏà† ÎßàÏùÑÎ°ú, ‚ÄòÌïúÍµ≠Ïùò ÎßàÏ∂îÌîΩÏ∂î‚ÄôÎùº Î∂àÎ¶ΩÎãàÎã§.",
  "Í¥ëÏïàÎåÄÍµêÎäî ÏïºÍ∞ÑÏóê Îß§Ïùº Îã§Î•∏ ÏÉâÏùò Í≤ΩÍ¥Ä Ï°∞Î™ÖÏùÑ ÏÑ†Î≥¥Ïù¥Î©∞, Î∂ÄÏÇ∞ ÏïºÍ≤Ω Î™ÖÏÜå 1ÏàúÏúÑÎ°ú ÍºΩÌûôÎãàÎã§.",
  "Ìï¥Ïö¥ÎåÄ Ìï¥ÏàòÏöïÏû•ÏùÄ Ï°∞ÏÑ† ÏãúÎåÄÎ∂ÄÌÑ∞ Í≤ΩÏäπÏßÄÎ°ú Í∏∞Î°ùÎêòÏóàÍ≥†, Ïù¥Î¶ÑÏùÄ Ïã†Îùº ÌïôÏûê ÏµúÏπòÏõêÏùò Ìò∏ ‚ÄòÌï¥Ïö¥(Êµ∑Èõ≤)‚ÄôÏóêÏÑú Ïú†ÎûòÌñàÏäµÎãàÎã§.",
  "ÏûêÍ∞àÏπòÏãúÏû•ÏùÄ ÌïúÍµ≠ ÏµúÎåÄÏùò ÏàòÏÇ∞ ÏãúÏû• Ï§ë ÌïòÎÇòÎ°ú, ‚ÄòÏò§Ïù¥ÏÜå„ÜçÎ≥¥Ïù¥ÏÜå„ÜçÏÇ¨Ïù¥ÏÜå‚Äô ÏÇ¨Ìà¨Î¶¨Î°ú Ïú†Î™ÖÌï©ÎãàÎã§.",
  "ÌÉúÏ¢ÖÎåÄÎäî Ï†àÎ≤Ω ÏúÑ Ï†ÑÎßùÎåÄÏóêÏÑú ÎåÄÌïúÌï¥ÌòëÏùÑ Ï°∞ÎßùÌï† Ïàò ÏûàÍ≥†, ÎßëÏùÄ ÎÇ†Ïóî ÎåÄÎßàÎèÑÎèÑ Î≥¥Ïù∏Îã§Îäî ÌõÑÍ∏∞Í∞Ä ÎßéÏäµÎãàÎã§.",
  "Î∂ÄÏÇ∞ ÏòÅÌôîÏùòÏ†ÑÎãπÏùÄ ÏÑ∏Í≥ÑÏóêÏÑú Í∞ÄÏû• Í∏¥ ‚ÄòÏ∫îÌã∏Î†àÎ≤Ñ ÏßÄÎ∂ï‚ÄôÏúºÎ°ú Í∏∞ÎÑ§Ïä§ Í∏∞Î°ùÏùÑ Î≥¥Ïú†ÌñàÏäµÎãàÎã§.",
  "Íµ≠Ï†úÏãúÏû• Í≥®Î™©ÏùÄ 6.25 Ï†ÑÌõÑ ÏûêÏó∞Î∞úÏÉùÌïú ÏãúÏû•ÏúºÎ°ú, Í≥®Î™©ÎßàÎã§ ÌÖåÎßàÍ∞Ä Îã¨Îùº ÌïòÎ£® ÏΩîÏä§Î°úÎèÑ Î™®ÏûêÎûçÎãàÎã§.",
  "Ïö©Í∂ÅÏÇ¨Îäî Î∞îÎã§ÏôÄ Í∞ÄÏû• Í∞ÄÍπåÏö¥ ÏÇ¨Ï∞∞ Ï§ë ÌïòÎÇòÎ°ú, ÏùºÏ∂ú Î™ÖÏÜåÎ°ú ÌäπÌûà Ïú†Î™ÖÌï©ÎãàÎã§.",
  "ÏÜ°Ï†ï Ìï¥ÏàòÏöïÏû•ÏùÄ ‚ÄòÏÑúÌïë Î©îÏπ¥‚ÄôÎ°ú Í∏âÎ∂ÄÏÉÅÌïòÏó¨ Ï¥àÎ≥¥Ïûê Í∞ïÏäµ ÏãúÏÑ§Ïù¥ Î™∞Î†§ ÏûàÏäµÎãàÎã§.",
  "Î∂ÄÏÇ∞ ÌòÑÎåÄÎØ∏Ïà†Í¥Ä(MoCA)ÏùÄ ÏùÑÏàôÎèÑ Ï≤†ÏÉàÎèÑÎûòÏßÄ Í∑ºÏ≤òÏóê ÏûàÏñ¥ ÏûêÏó∞Í≥º Ï†ÑÏãú Í¥ÄÎûåÏùÑ Ìï®Íªò Ï¶êÍ∏∞Í∏∞ Ï¢ãÏäµÎãàÎã§."
];


  // ÌôîÎ©¥Ìè≠ Í∏∞Î∞ò Í∞êÏßÄ (ÍπúÎπ°ÏûÑ Î∞©ÏßÄ: noSsr)
  const isViewportMobile = useMediaQuery(theme.breakpoints.down("sm"), { noSsr: true });
  const isDeviceMobile = isMobileUA || isAndroid || isIOS;
  const isMobile = useMemo(() => {
    const params = new URLSearchParams(typeof window !== "undefined" ? window.location.search : "");
    let v = isDeviceMobile || isViewportMobile;
    if (params.get("m") === "1") v = true;
    if (params.get("m") === "0") v = false;
    return v;
  }, [isViewportMobile, isDeviceMobile]);

  /* ------------------ ÏÉÅÌÉú ------------------ */
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState({ open: false, message: "", severity: "info" });
  const [activeStep, setActiveStep] = useState(0);

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú
  const [loginStatus, setLoginStatus] = useState({
    user_id: "",
    logged_in: false,
    has_survey_data: false,
    has_votes: false,
    status: "",
  });

  // ÏÑ§Î¨∏ ÏûÖÎ†• (ÏõêÎ≥∏ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ: 5Í∞ú)
  const [activity, setActivity] = useState("");
  const [activityLevel, setActivityLevel] = useState("");
  const [time, setTime] = useState("");
  const [season, setSeason] = useState("");
  const [preference, setPreference] = useState("");

  // Ï∂îÏ≤ú/Ìà¨Ìëú/ML
  const [placeRecs, setPlaceRecs] = useState([]);
  const [currentVotes, setCurrentVotes] = useState([]);
  const [mlRecs, setMlRecs] = useState([]);

  // Ìà¨Ìëú UX
  const [currentRoundIdx, setCurrentRoundIdx] = useState(0);
  const [selectedMessage, setSelectedMessage] = useState("");
  const [isAdvancing, setIsAdvancing] = useState(false);

  useEffect(() => { (async () => { await handleCheckLogin(); })(); /* eslint-disable-next-line */ }, []);

  const showToast = (message, severity = "info") => setToast({ open: true, message, severity });
  const closeToast = () => setToast((t) => ({ ...t, open: false }));

  /* ------------------ Î°úÍ∑∏Ïù∏ ------------------ */


  const handleCheckLogin = async () => {
    setLoading(true);
    try {
      if (localStorage.getItem(BYPASS_KEY) === "1") {
        const dummy = { user_id: "dev-admin", logged_in: true, has_survey_data: false, has_votes: false, status: "bypass" };
        setLoginStatus(dummy);
        setActiveStep(1);
        showToast("Í¥ÄÎ¶¨Ïûê(Î°úÏª¨) Î°úÍ∑∏Ïù∏ Ïú†ÏßÄ Ï§ë", "success");
        return;
      }
      const resp = await apiCall(`${API_BASE}/survey`);
      const loggedIn = !!(resp && (resp.logged_in || resp.user_id));
      setLoginStatus({
        user_id: resp?.user_id || "",
        logged_in: loggedIn,
        has_survey_data: !!resp?.has_survey_data,
        has_votes: !!resp?.has_votes,
        status: resp?.status || "",
      });
      setActiveStep(loggedIn ? 1 : 0);
      showToast(loggedIn ? "Î°úÍ∑∏Ïù∏Îê®" : "Î°úÍ∑∏Ïù∏ ÌïÑÏöî", loggedIn ? "success" : "warning");
    } catch (e) {
      showToast(`Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ${e.message}`, "error");
      setActiveStep(0);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    setLoading(true);
    try {
      localStorage.removeItem(BYPASS_KEY);
      try { await apiCall(`${API_BASE}/auth/logout`, { method: "POST" }); } catch { }
      setLoginStatus({ user_id: "", logged_in: false, has_survey_data: false, has_votes: false, status: "" });
      setActiveStep(0);
      showToast("Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å", "success");
    } catch (e) {
      showToast(`Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  /* ------------------ ÏÑ§Î¨∏ ------------------ */
  const handleSubmitSurvey = async () => {
    const surveyDataRaw = { activity, activity_level: activityLevel, time, season, preference };
    if (!Object.values(surveyDataRaw).every(Boolean)) {
      showToast("Î™®Îì† ÏÑ§Î¨∏ Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.", "warning");
      return;
    }
    const levelMap = { "Î≥¥ÌÜµ": "Ï§ëÍ∞Ñ" };
    const surveyData = { ...surveyDataRaw, activity_level: levelMap[surveyDataRaw.activity_level] || surveyDataRaw.activity_level };

    setLoading(true);
    try {
      const data = await apiCall(`${API_BASE}/survey/submit`, { method: "POST", body: surveyData });
      showToast(data?.message || "ÏÑ§Î¨∏ Ï†úÏ∂ú ÏôÑÎ£å", "success");
      setActiveStep(2);
    } catch (e) {
      showToast(`ÏÑ§Î¨∏ Ï†úÏ∂ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  const handleSurveyStatus = async () => {
    setLoading(true);
    try {
      const resp = await apiCall(`${API_BASE}/survey/data`);
      const msg = [
        `ÏÉÅÌÉú: ${resp?.status || "-"}`,
        `Ï¥ù Ìà¨Ìëú Ïàò: ${resp?.total_votes ?? 0}`,
        resp?.database_info ? `DB: ${JSON.stringify(resp.database_info)}` : "",
      ].filter(Boolean).join("\n");
      showToast(msg || "ÏÉÅÌÉú Ï°∞Ìöå ÏôÑÎ£å", "info");
    } catch (e) {
      showToast(`ÏÑ§Î¨∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  /* ------------------ Ï∂îÏ≤ú/Ìà¨Ìëú ------------------ */
  const handlePlaceRecs = async () => {
    setLoading(true);
    try {
      const resp = await apiCall(`${API_BASE}/survey/place-recommendations`);
      const mapped = (resp?.recommendations || []).map((r) => ({
        round_number: r.round_number,
        primary: r.option_a?.item || null,
        alternative: r.option_b?.item || null,
      }));
      const withPhotos = await augmentRoundImages(mapped);
      setPlaceRecs(withPhotos);
      setCurrentVotes([]);
      setSelectedMessage("");
      setIsAdvancing(false);
      setCurrentRoundIdx(0);
      showToast("Ïû•ÏÜå Ï∂îÏ≤ú ÏôÑÎ£å", "success");
    } catch (e) {
      setPlaceRecs([]);
      setCurrentVotes([]);
      showToast(`Ï∂îÏ≤ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  const isSelected = (roundIdx, which, name) => {
    const v = currentVotes[roundIdx];
    const want = which === "primary" ? "option_a" : "option_b";
    return v && v.choice === want && v.item_name === name;
  };

  const rounds = useMemo(() => (placeRecs || []).slice(0, 5), [placeRecs]);

  useEffect(() => {
    if (activeStep === 2 && (placeRecs?.length ?? 0) === 0) handlePlaceRecs();
  }, [activeStep]); // eslint-disable-line

  const selectVote = (roundIndex, which, item) => {
    const choice = which === "primary" ? "option_a" : "option_b";
    setCurrentVotes((prev) => {
      const copy = [...prev];
      copy[roundIndex] = { round: roundIndex + 1, choice, item_name: item?.name || null };
      return copy;
    });
  };

  const handleSelectAndAdvance = (roundIdx, which, item) => {
    if (isAdvancing) return;
    selectVote(roundIdx, which, item);
    setSelectedMessage(`${item?.name || "ÏÑ†ÌÉù Ìï≠Î™©"}ÏùÑ(Î•º) Í≥†Î•¥ÏÖ®ÏäµÎãàÎã§ ‚úÖ`);
    setIsAdvancing(true);

    setTimeout(() => {
      setSelectedMessage("");
      setIsAdvancing(false);
      if (roundIdx < rounds.length - 1) setCurrentRoundIdx(roundIdx + 1);
      else showToast("ÎßàÏßÄÎßâ ÎùºÏö¥Îìú ÏÑ†ÌÉù ÏôÑÎ£å! 'Ìà¨Ìëú Ï†úÏ∂ú'ÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.", "info");
    }, 1000);
  };

  const handleSubmitVotes = async () => {
    if (!rounds?.length) {
      showToast("Ï∂îÏ≤úÏù¥ ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", "warning");
      return;
    }
    const missing = [];
    for (let i = 0; i < rounds.length; i++) {
      if (!currentVotes[i] || !currentVotes[i]?.choice || !currentVotes[i]?.item_name) missing.push(i + 1);
    }
    if (missing.length) {
      showToast(`ÎùºÏö¥Îìú ${missing.join(", ")}Ïùò ÏÑ†ÌÉù Ï†ïÎ≥¥Í∞Ä ÎàÑÎùΩÎêòÏóàÏñ¥Ïöî. Îã§Ïãú ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.`, "warning");
      const firstMissing = Math.min(...missing) - 1;
      setCurrentRoundIdx(firstMissing);
      return;
    }

    const payloadVotes = currentVotes
      .slice(0, rounds.length)
      .map((v, i) => ({ round: i + 1, choice: v.choice, item_name: v.item_name }));

    setLoading(true);
    try {
      const resp = await apiCall(`${API_BASE}/survey/votes`, { method: "POST", body: { votes: payloadVotes } });
      showToast(resp?.message ? `Ìà¨Ìëú Ï†úÏ∂ú ÏôÑÎ£å: ${resp.message}` : "Ìà¨Ìëú Ï†úÏ∂ú ÏôÑÎ£å", "success");
      try { await handleCheckLogin(); } catch { }
      setActiveStep(3);
    } catch (e) {
      showToast(`Ìà¨Ìëú Ï†úÏ∂ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  /* ------------------ ML: ÏûêÎèô Î°úÎî© ‚Üí ÏûêÎèô Ïù¥Îèô ------------------ */
  const handleMLRecs = async (autoNavigate = false) => {
    setLoading(true);
    setMlLoading(true);
    setMlProgress(0);

    // ÏßÑÌñâÎ∞î/ÌåÅ ÌöåÏ†Ñ ÌÉÄÏù¥Î®∏
const started = Date.now();
const progTimer = setInterval(() => {
  const elapsed = Date.now() - started;
  // 12Ï¥à Í∏∞Ï§ÄÏúºÎ°ú Î∂ÄÎìúÎüΩÍ≤å Ïò¨Î¶¨Í≥†, Ïã§Ï†ú ÏùëÎãµ Ïò§Î©¥ 100%Î°ú ÎßàÎ¨¥Î¶¨
  const soft = Math.min(95, Math.round((elapsed / 12000) * 100));
  setMlProgress((p) => (p < soft ? soft : p));
}, 160); // frame ÏÜçÎèÑÎèÑ ÏÇ¥Ïßù ÎäêÎ¶¨Í≤å

const tipTimer = setInterval(() => {
  setMlTipIdx((i) => (i + 1) % LOADING_TIPS.length);
}, 4200);

    try {
      const uid = loginStatus?.user_id;
      if (!uid) {
        throw new Error("user_idÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. Î®ºÏ†Ä Î°úÍ∑∏Ïù∏Ìï¥ Ï£ºÏÑ∏Ïöî.");
      }
      const resp = await apiCall(`${API_BASE}/survey/ml-recommendations?user_id=${encodeURIComponent(uid)}&k=20`);
      const raw = Array.isArray(resp?.recommendations) ? resp.recommendations : [];
      const normalized = raw.map((p, i) => normalizeMlSpot(p, i));

      // Îßµ ÏÇ¨ÏßÑ Î≥¥Í∞ï (ÏòµÏÖò)
      if (GMAPS_KEY) {
        const loader = new Loader({ apiKey: GMAPS_KEY, libraries: ["places"], region: "KR", language: "ko" });
        await loader.load();
        const mapDiv = document.createElement("div");
        const service = new window.google.maps.places.PlacesService(mapDiv);
        const BUSAN_CENTER = { lat: 35.1796, lng: 129.0756 };
        for (const spot of normalized) {
          const hasImage = spot.image && !/^data:image/i.test(spot.image) && !/placeholder/i.test(spot.image);
          if (hasImage) continue;
          const query = (spot.name || "").trim();
          if (!query) continue;
          const place = await new Promise((resolve) => {
            service.textSearch(
              { query: `Î∂ÄÏÇ∞ ${query}`, location: new window.google.maps.LatLng(BUSAN_CENTER.lat, BUSAN_CENTER.lng), radius: 50000, language: "ko" },
              (results) => resolve(Array.isArray(results) && results.length ? results[0] : null)
            );
          });
          if (!place?.place_id) continue;
          const details = await new Promise((resolve) => {
            service.getDetails({ placeId: place.place_id, language: "ko", fields: ["photos"] }, (d) => resolve(d || null));
          });
          const url = details?.photos?.[0]?.getUrl({ maxWidth: 1200, maxHeight: 900 });
          if (url) spot.image = url;
        }
      }

      setMlRecs(normalized);
      setMlProgress(100);

      if (autoNavigate) {
        // Í≥ßÎ∞îÎ°ú Ï∂îÏ≤ú ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        navigate("/tourist-spot-recommend", {
          state: {
            user_id: loginStatus?.user_id || "",
            attractions: normalized.map((r, i) => ({
              id: String(r.id || r.item_id || r._id || r.content_id || r.ml_index || i + 1),
              name: r.name || r.item_name || "",
              address: r.address || "",
              lat: r.lat,
              lng: r.lng,
              image: r.image || "",
              category_type: r.category_type || null,
              category: r.category || "",
              score: typeof r.ml_score === "number" ? r.ml_score : r.score ?? null,
              reason: r.reason || "",
            })),
            isMlList: true,
            source: "ml",
          },
        });
      } else {
        showToast(resp?.message || `AI Ï∂îÏ≤ú ÏôÑÎ£å (${normalized.length}Í≥≥)`, "success");
      }
    } catch (e) {
      showToast(`AI Ï∂îÏ≤ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      clearInterval(progTimer);
      clearInterval(tipTimer);
      setMlLoading(false);
      setLoading(false);
    }
  };

  // AI Ï∂îÏ≤ú Îã®Í≥ÑÏóê Îì§Ïñ¥Ïò§Î©¥ ÏûêÎèô Ïã§Ìñâ(Î°úÎî© TIP ÌôîÎ©¥ ‚Üí ÏûêÎèô Ïù¥Îèô)
  useEffect(() => {
    if (activeStep === 3) {
      setMlTipIdx(Math.floor(Math.random() * LOADING_TIPS.length));
      setMlProgress(0);
      handleMLRecs(true); // ÏûêÎèô ÎÇ¥ÎπÑÍ≤åÏù¥Ìä∏
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeStep]);

  /* ------------------ Ïä§ÌÖù Ï†úÏñ¥ ------------------ */
  const canGoNext = useMemo(() => {
    switch (activeStep) {
      case 0: return loginStatus.logged_in || loginStatus.status === "bypass" || loginStatus.status === "guest";
      case 1: return [activity, activityLevel, time, season, preference].every(Boolean);
      case 2: return rounds.length > 0 && currentVotes.filter(Boolean).length === rounds.length;
      case 3: return true; // ÏûêÎèô ÏßÑÌñâ
      default: return true;
    }
  }, [activeStep, loginStatus, activity, activityLevel, time, season, preference, rounds, currentVotes]);

  const handleNext = () => setActiveStep((s) => Math.min(s + 1, steps.length - 1));
  const handleBack = () => setActiveStep((s) => Math.max(s - 1, 0));

  /* ======================================================================
     Ìó§Îçî + Ïä§ÌÖùÌçº
     ====================================================================== */
  const Header = () => (
    <Paper
      elevation={0}
      sx={{
        position: "sticky",
        top: 0,
        zIndex: 10,
        borderBottom: `1px solid ${tone.border}`,
        background: `linear-gradient(120deg, ${tone.primarySoft}, #F0FDFA)`
      }}
    >
      <Container maxWidth="lg" sx={{ py: { xs: 1.5, sm: 2, md: 2.5 }, px: { xs: 1.5, sm: 2, md: 3 } }}>
        <Stack direction="row" justifyContent="space-between" alignItems="center" spacing={2}>
          <Box>
            <Typography variant="h4" fontWeight={800} color={tone.primary} sx={{ fontSize: { xs: "1.25rem", sm: "1.5rem", md: "2rem" } }}>
              üó∫Ô∏è WhereWeGo ÏÑ§Î¨∏ ÏãúÏä§ÌÖú
            </Typography>
          </Box>
          <Stack direction="row" spacing={1} alignItems="center">
            <Chip
              color={(loginStatus.logged_in || loginStatus.status === "bypass") ? "success" : "default"}
              label={(loginStatus.logged_in || loginStatus.status === "bypass") ? "Î°úÍ∑∏Ïù∏Îê®" : "Î°úÍ∑∏ÏïÑÏõÉ"}
              variant="filled"
              size={isMobile ? "small" : "medium"}
            />
            {loading && <CircularProgress size={isMobile ? 18 : 24} />}
          </Stack>
        </Stack>
      </Container>
    </Paper>
  );

  const StepperBar = () => (
    <Container maxWidth="lg" sx={{ mt: { xs: 2, sm: 3 }, px: { xs: 1.5, sm: 2, md: 3 } }}>
      <Card variant="outlined" sx={{ borderColor: tone.border }}>
        <CardContent sx={{ py: { xs: 2, sm: 2.5, md: 3 } }}>
          {isMobile ? (
            <MobileStepper
              variant="progress"
              steps={steps.length}
              position="static"
              activeStep={activeStep}
              backButton={
                <Button size="small" onClick={handleBack} disabled={activeStep === 0} sx={{ fontSize: { xs: "0.75rem", sm: "0.85rem" } }}>
                  <ArrowBack fontSize="small" />Îí§Î°ú
                </Button>
              }
              nextButton={
                <Button size="small" onClick={handleNext} disabled={!canGoNext || activeStep === steps.length - 1} sx={{ fontSize: { xs: "0.75rem", sm: "0.85rem" } }}>
                  Îã§Ïùå<ArrowForward fontSize="small" />
                </Button>
              }
              sx={{ bgcolor: "transparent", px: 0 }}
            />
          ) : (
            <Stepper activeStep={activeStep} alternativeLabel>
              {steps.map((label) => (
                <Step key={label}><StepLabel>{label}</StepLabel></Step>
              ))}
            </Stepper>
          )}
        </CardContent>
      </Card>
    </Container>
  );

  /* ======================================================================
     Î†åÎçî
     ====================================================================== */
  return (
    <Box sx={{ bgcolor: tone.subtle, minHeight: "100dvh", width: { xs: "100vw", md: "100%" }, overflowX: "hidden", display: "flex", flexDirection: "column" }}>
      <Header />
      <StepperBar />

      <Container maxWidth="lg" sx={{ flex: 1, py: { xs: 2, sm: 3, md: 4 }, px: { xs: 1.5, sm: 2, md: 3 } }}>
        <AnimatePresence mode="wait" initial={false}>
          {/* STEP 0 - Î°úÍ∑∏Ïù∏ */}
          {activeStep === 0 && (
            <motion.div key="step-login" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
              <Grid container spacing={{ xs: 2, sm: 2.5, md: 3 }}>
                <Grid item xs={12}>
                  <Card variant="outlined" sx={{ borderColor: tone.border }}>
                    <CardHeader
                      avatar={<LoginIcon color="primary" sx={{ fontSize: { xs: "1.25rem", sm: "1.5rem" } }} />}
                      title="1. Î°úÍ∑∏Ïù∏"
                      subheader="Google / Kakao ÎòêÎäî Í¥ÄÎ¶¨Ïûê(Î°úÏª¨) Î°úÍ∑∏Ïù∏, ÌòπÏùÄ Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÏßÑÌñâ"
                      titleTypographyProps={{ fontWeight: 700, fontSize: { xs: "1.1rem", sm: "1.25rem", md: "1.5rem" } }}
                      subheaderTypographyProps={{ fontSize: { xs: "0.75rem", sm: "0.85rem", md: "0.95rem" } }}
                    />
                    <CardContent>
                      {(loginStatus.logged_in || loginStatus.status === "bypass") ? (
                        <Alert icon={<CheckCircleIcon fontSize="inherit" />} severity="success" sx={{ mb: 2, fontSize: { xs: "0.8rem", sm: "0.9rem" } }}>
                          Î°úÍ∑∏Ïù∏Îê® ‚Äî ÏÑ§Î¨∏: <b>{loginStatus.has_survey_data ? "ÏôÑÎ£å" : "ÎØ∏ÏôÑÎ£å"}</b>, Ìà¨Ìëú: <b>{loginStatus.has_votes ? "ÏôÑÎ£å" : "ÎØ∏ÏôÑÎ£å"}</b>
                        </Alert>
                      ) : (
                        <Alert icon={<ErrorIcon fontSize="inherit" />} severity="warning" sx={{ mb: 2, fontSize: { xs: "0.8rem", sm: "0.9rem" } }}>
                          Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.
                        </Alert>
                      )}
                      <Stack direction={{ xs: "column", sm: "row" }} spacing={1}>
                        <Button startIcon={<GoogleIcon />} variant="contained" color="primary" onClick={() => (window.location.href = GOOGLE_LOGIN_URL)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" }, py: { xs: 1, sm: 1.2 } }}>
                          Google Î°úÍ∑∏Ïù∏
                        </Button>
                        <Button startIcon={<ChatBubbleIcon />} variant="outlined" color="primary" onClick={() => (window.location.href = KAKAO_LOGIN_URL)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" }, py: { xs: 1, sm: 1.2 } }}>
                          Kakao Î°úÍ∑∏Ïù∏
                        </Button>
                         </Stack>
                    </CardContent>
                    <CardActions sx={{ justifyContent: "space-between", px: 2, pb: 2 }}>
                      <Stack direction="row" spacing={1}>
                        <Button onClick={handleCheckLogin} sx={{ fontSize: { xs: "0.75rem", sm: "0.85rem" } }}>ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®</Button>
                        <Button variant="contained" onClick={() => setActiveStep(1)} sx={{ fontSize: { xs: "0.75rem", sm: "0.85rem" } }}>Îã§ÏùåÏúºÎ°ú</Button>
                      </Stack>
                      <Button color="error" startIcon={<LogoutIcon />} onClick={handleLogout} sx={{ fontSize: { xs: "0.75rem", sm: "0.85rem" } }}>
                        Î°úÍ∑∏ÏïÑÏõÉ
                      </Button>
                    </CardActions>
                  </Card>
                </Grid>
              </Grid>
            </motion.div>
          )}

          {/* STEP 1 - ÏÑ§Î¨∏ (ÏõêÎ≥∏ 5Ìï≠Î™© Ïú†ÏßÄ) */}
          {activeStep === 1 && (
            <motion.div key="step-survey" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
              <Grid container spacing={{ xs: 2, sm: 2.5, md: 3 }}>
                <Grid item xs={12}>
                  <Card variant="outlined" sx={{ borderColor: tone.border }}>
                    <CardHeader
                      avatar={<ChecklistIcon color="primary" sx={{ fontSize: { xs: "1.25rem", sm: "1.5rem" } }} />}
                      title="2. Í¥ÄÍ¥ë ÏÑ†Ìò∏ÎèÑ Ï°∞ÏÇ¨"
                      subheader="Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäî ÏöîÏÜåÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
                      titleTypographyProps={{ fontWeight: 700, fontSize: { xs: "1.1rem", sm: "1.25rem", md: "1.5rem" } }}
                      subheaderTypographyProps={{ fontSize: { xs: "0.75rem", sm: "0.85rem", md: "0.95rem" } }}
                    />
                    <CardContent>
                      <Grid container spacing={{ xs: 1.5, sm: 2 }}>
                        <Grid item xs={12} sm={6}>
                          <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                            <InputLabel>ÌôúÎèô Ïú†Ìòï</InputLabel>
                            <Select label="ÌôúÎèô Ïú†Ìòï" value={activity} onChange={(e) => setActivity(e.target.value)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" } }}>
                              <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                              {["ÏûêÏó∞ÌíçÍ≤Ω", "ÏûêÏó∞ÏÇ∞Î¶º", "Í¥ÄÎûåÎ∞èÏ≤¥Ìóò", "Ìú¥Ïñë", "ÌÖåÎßàÍ±∞Î¶¨", "ÏòàÏà†Í∞êÏÉÅ", "Í≥µÏó∞Í¥ÄÎûå", "Ìä∏Î†àÌÇπ"].map(v => <MenuItem key={v} value={v}>{v}</MenuItem>)}
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                            <InputLabel>ÌôúÎèôÏÑ±</InputLabel>
                            <Select label="ÌôúÎèôÏÑ±" value={activityLevel} onChange={(e) => setActivityLevel(e.target.value)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" } }}>
                              <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                              <MenuItem value="ÎÇÆÏùå">ÎÇÆÏùå</MenuItem>
                              <MenuItem value="Î≥¥ÌÜµ">Î≥¥ÌÜµ</MenuItem>
                              <MenuItem value="ÎÜíÏùå">ÎÜíÏùå</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                            <InputLabel>ÏãúÍ∞ÑÎåÄ</InputLabel>
                            <Select label="ÏãúÍ∞ÑÎåÄ" value={time} onChange={(e) => setTime(e.target.value)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" } }}>
                              <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                              {["Ïò§Ï†Ñ", "Ïò§ÌõÑ", "Ï†ÄÎÖÅ", "Î∞§"].map(v => <MenuItem key={v} value={v}>{v}</MenuItem>)}
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <FormControl fullWidth size={isMobile ? "small" : "medium"}>
                            <InputLabel>Í≥ÑÏ†à</InputLabel>
                            <Select label="Í≥ÑÏ†à" value={season} onChange={(e) => setSeason(e.target.value)} sx={{ fontSize: { xs: "0.85rem", sm: "0.95rem" } }}>
                              <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                              {["Î¥Ñ", "Ïó¨Î¶Ñ", "Í∞ÄÏùÑ", "Í≤®Ïö∏"].map(v => <MenuItem key={v} value={v}>{v}</MenuItem>)}
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={12}>
                          <Typography component="label" htmlFor="pref-toggle" sx={{ display: "block", mb: 0.75, fontWeight: 700 }}>
                            Ï§ëÏöî ÏöîÏÜå
                          </Typography>
                          <ButtonGroup id="pref-toggle" fullWidth aria-label="Ï§ëÏöî ÏöîÏÜå ÏÑ†ÌÉù">
                            <Button onClick={() => setPreference("ÌôúÎèôÏÑ±")} variant={preference === "ÌôúÎèôÏÑ±" ? "contained" : "outlined"}>ÌôúÎèôÏÑ±</Button>
                            <Button onClick={() => setPreference("ÏãúÍ∞ÑÎåÄ")} variant={preference === "ÏãúÍ∞ÑÎåÄ" ? "contained" : "outlined"}>ÏãúÍ∞ÑÎåÄ</Button>
                          </ButtonGroup>
                          <Typography variant="caption" sx={{ display: "block", mt: 0.5, opacity: 0.7 }}>
                            Î≤ÑÌäºÏùÑ ÎàåÎü¨ Îëò Ï§ë ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.
                          </Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                    <CardActions sx={{ justifyContent: "space-between", px: 2, pb: 2 }}>
                      <Button disabled={activeStep === 0} onClick={handleBack}>Îí§Î°ú</Button>
                      <Stack direction="row" spacing={1} flexWrap="wrap" gap={0.5}>
                        <Button onClick={handleSurveyStatus} startIcon={<PendingIcon />}>ÏÑ§Î¨∏ ÏÉÅÌÉú</Button>
                        <Button onClick={handleSubmitSurvey} variant="contained" startIcon={<SendIcon />}>ÏÑ§Î¨∏ Ï†úÏ∂ú</Button>
                        <Button variant="outlined" onClick={() => setActiveStep(2)}>Îã§Ïùå</Button>
                      </Stack>
                    </CardActions>
                  </Card>
                </Grid>
              </Grid>
            </motion.div>
          )}

          {/* STEP 2 - Ìà¨Ìëú */}
          {activeStep === 2 && (
            <motion.div key="step-vote" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
              <Grid container spacing={{ xs: 2, sm: 2.5, md: 3 }}>
                <Grid item xs={12}>
                  <Card variant="outlined" sx={{ borderColor: tone.border }}>
                    <CardHeader
                      avatar={<HowToVoteIcon color="primary" sx={{ fontSize: { xs: "1.25rem", sm: "1.5rem" } }} />}
                      title={`3. Ìà¨Ìëú (ÎùºÏö¥Îìú ${currentRoundIdx + 1}/${rounds.length || 0})`}
                      subheader="Ï∂îÏ≤úÎêú Îëê Ïû•ÏÜå Ï§ë ÏÑ†Ìò∏ÌïòÎäî Í≥≥ÏùÑ ÎùºÏö¥ÎìúÎ≥ÑÎ°ú ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                      titleTypographyProps={{ fontWeight: 700 }}
                    />
                    <CardActions sx={{ px: 2, pt: 0, flexWrap: "wrap", gap: 1 }}>
                      <Button onClick={handleSubmitVotes} variant="contained" startIcon={<HowToVoteIcon />} disabled={!rounds.length || isAdvancing}>
                        Ìà¨Ìëú Ï†úÏ∂ú
                      </Button>
                      {isMobile && rounds.length > 0 && (
                        <Stack direction="row" spacing={0.5} sx={{ ml: "auto" }}>
                          <IconButton size="small" disabled={currentRoundIdx === 0 || isAdvancing} onClick={() => setCurrentRoundIdx((i) => Math.max(0, i - 1))}>
                            <ArrowBack fontSize="small" />
                          </IconButton>
                          <IconButton size="small" disabled={currentRoundIdx >= rounds.length - 1 || isAdvancing} onClick={() => setCurrentRoundIdx((i) => Math.min(rounds.length - 1, i + 1))}>
                            <ArrowForward fontSize="small" />
                          </IconButton>
                        </Stack>
                      )}
                    </CardActions>

                    <CardContent sx={{ pt: 0 }}>
                      {!rounds.length ? (
                        <Alert severity="info">Ï∂îÏ≤úÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî‚Ä¶ Ïû†ÏãúÎßåÏöî.</Alert>
                      ) : (
                        <>
                          <AnimatePresence>
                            {selectedMessage && (
                              <motion.div initial={{ opacity: 0, y: -6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }} transition={{ duration: 0.25 }}>
                                <Alert severity="success" sx={{ my: 1.5, fontWeight: 700 }}>{selectedMessage}</Alert>
                              </motion.div>
                            )}
                          </AnimatePresence>

                          {(() => {
                            const round = rounds[currentRoundIdx] || {};
                            return (
                              <Grid container spacing={{ xs: 1.5, sm: 2, md: 3 }}>
                                <Grid item xs={12} md={6}>
                                  <BigChoiceCard
                                    label="A"
                                    place={round?.primary}
                                    selected={isSelected(currentRoundIdx, "primary", round?.primary?.name)}
                                    onSelect={() => handleSelectAndAdvance(currentRoundIdx, "primary", round?.primary)}
                                    compact={isMobile}
                                    disabled={isAdvancing}
                                  />
                                </Grid>
                                <Grid item xs={12} md={6}>
                                  <BigChoiceCard
                                    label="B"
                                    place={round?.alternative}
                                    selected={isSelected(currentRoundIdx, "alternative", round?.alternative?.name)}
                                    onSelect={() => handleSelectAndAdvance(currentRoundIdx, "alternative", round?.alternative)}
                                    compact={isMobile}
                                    disabled={isAdvancing}
                                  />
                                </Grid>
                              </Grid>
                            );
                          })()}

                          <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mt: 2 }}>
                            <Typography variant="body1" sx={{ opacity: 0.8 }}>
                              ÌòÑÏû¨ ÏÑ†ÌÉù:{" "}
                              {currentVotes[currentRoundIdx]?.choice ? `${currentVotes[currentRoundIdx].choice} ¬∑ ${currentVotes[currentRoundIdx].item_name}` : "ÏóÜÏùå"}
                            </Typography>
                            {!isMobile && (
                              <Stack direction="row" spacing={1}>
                                <Button startIcon={<ArrowBack />} disabled={currentRoundIdx === 0 || isAdvancing} onClick={() => setCurrentRoundIdx((i) => Math.max(0, i - 1))}>
                                  Ïù¥Ï†Ñ ÎùºÏö¥Îìú
                                </Button>
                                <Button variant="outlined" disabled={currentRoundIdx >= rounds.length - 1 || isAdvancing} onClick={() => setCurrentRoundIdx((i) => Math.min(rounds.length - 1, i + 1))}>
                                  Îã§Ïùå ÎùºÏö¥Îìú
                                </Button>
                              </Stack>
                            )}
                          </Stack>
                        </>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </motion.div>
          )}

          {/* STEP 3 - ML Ï∂îÏ≤ú: ÏûêÎèô Î°úÎî© ‚Üí ÏûêÎèô Ïù¥Îèô */}
          {activeStep === 3 && (
            <motion.div
              key="step-ml"
              variants={pageVariants}
              initial="initial"
              animate="in"
              exit="out"
              transition={pageTransition}
            >
              <Grid container spacing={{ xs: 2, sm: 2.5, md: 3 }}>
                <Grid item xs={12}>
                  <Card variant="outlined" sx={{ borderColor: tone.border }}>
                    <CardHeader
  avatar={<ScienceIcon color="primary" sx={{ fontSize: { xs: "1.25rem", sm: "1.5rem" } }} />}
  title="Î∂ÑÏÑù Ï§ë..."
  subheader="ÎßûÏ∂§Ìòï Î∂ÄÏÇ∞ Ïó¨Ìñâ Ï∂îÏ≤úÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§..."
  titleTypographyProps={{
    fontWeight: 900,
    fontSize: { xs: "1.4rem", sm: "1.6rem", md: "1.8rem" },
    color: tone.primary,
  }}
  subheaderTypographyProps={{
    fontSize: { xs: "0.9rem", sm: "1rem" },
    mt: 0.5,
  }}
/>
<CardContent>
  <Box
    sx={{
      p: { xs: 2, sm: 2.5 },
      border: `1px solid ${tone.border}`,
      borderRadius: 2,
      bgcolor: tone.paper,
    }}
  >
    {/* "ÏïåÍ≥† Í≥ÑÏÖ®ÎÇòÏöî?" Î∞ïÏä§ */}
    <Box
      sx={{
        p: { xs: 1.5, sm: 2 },
        mb: 2,
        borderRadius: 2,
        bgcolor: "#F5F7FB",
      }}
    >
      <Typography variant="subtitle2" sx={{ fontWeight: 800, mb: 0.5 }}>
        ÏïåÍ≥† Í≥ÑÏÖ®ÎÇòÏöî?
      </Typography>
      <Typography
        variant="body2"
        sx={{ lineHeight: 1.7, color: "text.secondary" }}
      >
        {LOADING_TIPS[mlTipIdx]}
      </Typography>
    </Box>

    {/* ÏßÑÌñâ Í≤åÏù¥ÏßÄ */}
    <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
      <Box sx={{ flex: 1 }}>
        <LinearProgress variant="determinate" value={mlProgress} />
      </Box>
      <Typography variant="caption" sx={{ width: 38, textAlign: "right" }}>
        {mlProgress}%
      </Typography>
    </Box>

    <Typography variant="caption" sx={{ display: "block", mt: 1, opacity: 0.7 }}>
      AI Ï∂îÏ≤ú ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú Îã§Ïùå ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.
    </Typography>
  </Box>

  {/* Ïò§Î•ò Ïãú Ïû¨ÏãúÎèÑ Î≤ÑÌäº (Î°úÏßÅ ÎèôÏùº) */}
  {!mlLoading && mlProgress === 0 && (
    <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
      <Button variant="contained" onClick={() => handleMLRecs(true)}>Îã§Ïãú ÏãúÎèÑ</Button>
      <Button variant="text" onClick={() => setActiveStep(2)}>Ìà¨ÌëúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</Button>
    </Stack>
  )}
</CardContent>

                  </Card>
                </Grid>
              </Grid>
            </motion.div>
          )}

        </AnimatePresence>
      </Container>

      {/* ÌÜ†Ïä§Ìä∏ */}
      <Snackbar open={toast.open} autoHideDuration={5000} onClose={closeToast} anchorOrigin={{ vertical: "bottom", horizontal: "center" }}>
        <Alert onClose={closeToast} severity={toast.severity} sx={{ width: "100%" }}>
          <span style={{ whiteSpace: "pre-line" }}>{toast.message}</span>
        </Alert>
      </Snackbar>
    </Box>
  );
}
