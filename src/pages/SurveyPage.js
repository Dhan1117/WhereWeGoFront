// src/pages/SurveyPage.jsx
import React, { useEffect, useState, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import {
  Alert, Box, Button, Card, CardActions, CardContent, CardHeader,
  Chip, CircularProgress, Container, Divider, FormControl, Grid,
  IconButton, InputLabel, Link as MLink, MenuItem, Select, Snackbar,
  Stack, Stepper, Step, StepLabel, Tooltip, Typography,
  Skeleton, Badge, MobileStepper, Paper, useMediaQuery
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import LoginIcon from "@mui/icons-material/Login";
import GoogleIcon from "@mui/icons-material/Google";
import ChatBubbleIcon from "@mui/icons-material/ChatBubble";
import HowToVoteIcon from "@mui/icons-material/HowToVote";
import LogoutIcon from "@mui/icons-material/Logout";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import ErrorIcon from "@mui/icons-material/Error";
import ScienceIcon from "@mui/icons-material/Science";
import SendIcon from "@mui/icons-material/Send";
import ChecklistIcon from "@mui/icons-material/Checklist";
import PendingIcon from "@mui/icons-material/Pending";
import PlaceIcon from "@mui/icons-material/Place";
import { Search as SearchIcon, ArrowBack, ArrowForward } from "@mui/icons-material";
import { AnimatePresence, motion } from "framer-motion";

// ‚úÖ UA Í∏∞Î∞ò Í∞êÏßÄ
import { isMobile as isMobileUA, isAndroid, isIOS } from "react-device-detect";

// ---------- ÌôòÍ≤Ω Î≥ÄÏàò ----------
const API_PREFIX =
  process.env.REACT_APP_API_PREFIX ||
  (typeof import.meta !== "undefined" &&
    import.meta.env &&
    import.meta.env.VITE_API_PREFIX) ||
  "http://localhost:8000";
const API_BASE = `${API_PREFIX.replace(/\/$/, "")}/api/v1`;
const GOOGLE_LOGIN_URL = `${API_BASE}/auth/google/login`;
const KAKAO_LOGIN_URL = `${API_BASE}/auth/kakao/login`;
const GMAPS_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || "";

// ‚õ≥ Î°úÏª¨ Í¥ÄÎ¶¨Ïûê Ïö∞Ìöå ÌîåÎûòÍ∑∏ ÌÇ§ (ÌîÑÎ°†Ìä∏ Îç∞Î™®Ïö©)
const BYPASS_KEY = "wwg_admin_bypass";

// ---------- ÌåîÎ†àÌä∏ ----------
const tone = {
  primary: "#4338CA",
  primarySoft: "#EEF2FF",
  accent: "#0D9488",
  paper: "#ffffff",
  subtle: "#F7F7FB",
  border: "#E6E8EF",
  cardGrad: "linear-gradient(135deg, #F9FAFB 0%, #EEF2FF 40%, #ECFEFF 100%)",
};

// ---------- Í≥µÏö© Ïú†Ìã∏ ----------
async function apiCall(url, options = {}) {
  const body = options.body ? JSON.stringify(options.body) : undefined;
  const res = await fetch(url, {
    method: options.method || "GET",
    credentials: "include",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json",
      ...(options.headers || {}),
    },
    body,
  });
  if (res.status === 204) return {}; // Îπà ÏùëÎãµ ÌóàÏö©
  if (!res.ok) {
    let errDetail = `HTTP ${res.status}`;
    try {
      const err = await res.json();
      errDetail = err.detail || err.message || errDetail;
    } catch {}
    throw new Error(errDetail);
  }
  try {
    return await res.json();
  } catch {
    return {};
  }
}

// ---------- Ïù¥ÎØ∏ÏßÄ Ìó¨Ìçº ----------
const PLACEHOLDER_SVG = `
<svg xmlns='http://www.w3.org/2000/svg' width='1200' height='675' viewBox='0 0 1200 675'>
  <defs>
    <linearGradient id='g' x1='0' x2='1' y1='0' y2='1'>
      <stop offset='0%' stop-color='#eef2f7'/>
      <stop offset='100%' stop-color='#e5ecf5'/>
    </linearGradient>
  </defs>
  <rect width='1200' height='675' fill='url(#g)'/>
  <g fill='none' stroke='#9aa4b2' stroke-width='28' stroke-linecap='round' stroke-linejoin='round'>
    <rect x='170' y='140' width='860' height='460' rx='32'/>
    <circle cx='410' cy='340' r='70'/>
    <path d='M220 570l230-230 150 150 140-190 240 270z'/>
  </g>
</svg>`;
const PLACEHOLDER_URL = `data:image/svg+xml;utf8,${encodeURIComponent(PLACEHOLDER_SVG)}`;

function extractPhotoUrl(place) {
  const first = (arr) => (Array.isArray(arr) && arr.length ? arr[0] : null);
  const candidates = [
    place?.photoUrl, place?.image, place?.thumbnail, place?.coverImage, place?.cover,
    place?.img, place?.picture, place?.mainImage, first(place?.images), first(place?.image_urls),
    place?.photo_url, place?.img_url, place?.image_url, first(place?.photos)?.url || first(place?.photos)?.photoUrl,
  ].filter(Boolean);
  if (candidates.length) return candidates[0];

  const photoRef =
    place?.photo_reference ||
    place?.photoReference ||
    (first(place?.photos)?.photo_reference ?? first(place?.photos)?.photoReference);
  if (photoRef && GMAPS_KEY) {
    return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=1200&photo_reference=${encodeURIComponent(
      photoRef
    )}&key=${GMAPS_KEY}`;
  }
  return "";
}

// ---------- Ïï†ÎãàÎ©îÏù¥ÏÖò ----------
const pageVariants = {
  initial: { opacity: 0, y: 16 },
  in: { opacity: 1, y: 0 },
  out: { opacity: 0, y: -12 },
};
const pageTransition = { type: "spring", stiffness: 260, damping: 24 };

const steps = ["Î°úÍ∑∏Ïù∏", "ÏÑ§Î¨∏", "Ìà¨Ìëú", "ML Ï∂îÏ≤ú", "Í¥ÄÎ¶¨/ÌÖåÏä§Ìä∏"];

// Ïπ¥Îìú Îì±Ïû•/ÏÑ†ÌÉù Ïï†ÎãàÎ©îÏù¥ÏÖò
const cardEnter = {
  hidden: { opacity: 0, scale: 0.96, y: 12 },
  show: { opacity: 1, scale: 1, y: 0, transition: { type: "spring", stiffness: 220, damping: 18 } },
};
const cardTap = { whileTap: { scale: 0.98 } };
const selectedPulse = {
  animate: { boxShadow: ["0 0 0 0px rgba(13,148,136,0.45)", "0 0 0 16px rgba(13,148,136,0)"] },
  transition: { duration: 1.25, repeat: Infinity, ease: "easeOut" },
};

// ---------- Í≥µÏö© Ïª¥Ìè¨ÎÑåÌä∏ ----------
const DetailTooltipTitle = (p) => (
  <Box sx={{ p: 0.5 }}>
    <Typography variant="subtitle2" fontWeight={700}>{p?.name || "Ïù¥Î¶Ñ ÏóÜÏùå"}</Typography>
    <Typography variant="caption">üìç {p?.address || "-"}</Typography><br />
    <Typography variant="caption">üè∑Ô∏è {p?.category || "-"}</Typography><br />
    <Typography variant="caption">‚≠ê {p?.rating ?? "N/A"}</Typography>
    {p?.description && (
      <>
        <Divider sx={{ my: 0.5 }} />
        <Typography variant="caption" sx={{ whiteSpace: "pre-wrap" }}>{p.description}</Typography>
      </>
    )}
  </Box>
);

function BigChoiceCardInner({ label, place, selected, onSelect, compact = false, disabled = false }) {
  const [src, setSrc] = useState("");
  const [imgLoaded, setImgLoaded] = useState(false);
  useEffect(() => {
    const url = extractPhotoUrl(place) || PLACEHOLDER_URL;
    setImgLoaded(false);
    setSrc(url);
  }, [place]);

  return (
    <Badge
      invisible={!selected}
      overlap="circular"
      anchorOrigin={{ vertical: "top", horizontal: "left" }}
      badgeContent={<Chip label="ÏÑ†ÌÉùÎê®" color="success" size="small" sx={{ fontWeight: 700 }} />}
      sx={{ width: "100%" }}
    >
      <motion.div
        variants={cardEnter}
        initial="hidden"
        animate="show"
        {...cardTap}
        style={{ width: "100%" }}
      >
        <motion.div
          {...(selected ? selectedPulse : {})}
          style={{ borderRadius: 20 }}
        >
          <Card
            role="button"
            tabIndex={0}
            aria-disabled={disabled}
            onKeyDown={(e) => !disabled && ((e.key === "Enter" || e.key === " ") && onSelect())}
            variant="outlined"
            onClick={() => !disabled && onSelect()}
            sx={{
              outline: "none",
              borderWidth: 2,
              borderColor: selected ? tone.accent : tone.border,
              cursor: disabled ? "not-allowed" : "pointer",
              position: "relative",
              transition: "all .2s",
              background: tone.cardGrad,
              minHeight: compact ? 260 : 360,
              display: "flex",
              flexDirection: "column",
              "&:hover": disabled ? {} : {
                borderColor: tone.primary,
                transform: "translateY(-3px)",
                boxShadow: "0 18px 40px rgba(0,0,0,0.08)",
              },
              ...(selected && { boxShadow: `0 0 0 3px ${tone.accent}33 inset` }),
            }}
          >
            <CardContent sx={{ p: compact ? 2.5 : { xs: 3, md: 3.5 }, flex: 1 }}>
              <Stack direction="row" alignItems="flex-start" spacing={1.25} sx={{ mb: 1 }}>
                <PlaceIcon sx={{ color: tone.primary, mt: "3px", fontSize: 24 }} />
                <Box sx={{ flex: 1, minWidth: 0 }}>
                  <Typography variant="h5" fontWeight={900} noWrap>
                    {compact ? label + " ¬∑ " : ""}{place?.name || "-"}
                  </Typography>
                  <Typography variant="body2" sx={{ opacity: 0.9 }} noWrap>üìç {place?.address || "-"}</Typography>
                  <Typography variant="body2" sx={{ opacity: 0.8 }} noWrap>üè∑Ô∏è {place?.category || "-"} ¬∑ ‚≠ê {place?.rating ?? "N/A"}</Typography>
                </Box>
                <Tooltip title={DetailTooltipTitle(place)} arrow placement="left" componentsProps={{ tooltip: { sx: { maxWidth: 320 } } }}>
                  <IconButton type="button" size="small" onClick={(e) => e.stopPropagation()} aria-label="ÏÉÅÏÑ∏Î≥¥Í∏∞">
                    <SearchIcon />
                  </IconButton>
                </Tooltip>
              </Stack>

              <Box
                sx={{
                  mt: 1.25,
                  borderRadius: 2.5,
                  overflow: "hidden",
                  bgcolor: "#eef2f7",
                  position: "relative",
                  aspectRatio: "16/10",
                }}
              >
                {!imgLoaded && (
                  <Skeleton variant="rectangular" width="100%" height="100%" sx={{ position: "absolute", inset: 0 }} />
                )}
                <img
                  src={src}
                  alt={place?.name || "place"}
                  loading="lazy"
                  style={{ display: imgLoaded ? "block" : "none", width: "100%", height: "100%", objectFit: "cover" }}
                  onLoad={() => setImgLoaded(true)}
                  onError={(e) => { e.currentTarget.src = PLACEHOLDER_URL; setImgLoaded(true); }}
                  onClick={(e) => e.stopPropagation()}
                />
              </Box>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </Badge>
  );
}

const BigChoiceCard = React.memo(BigChoiceCardInner);

// ---------- Î©îÏù∏ ----------
export default function SurveyPage() {
  const navigate = useNavigate();
  const theme = useTheme();

  // ‚úÖ ÌôîÎ©¥Ìè≠ Í∏∞Î∞ò Í∞êÏßÄ (ÍπúÎπ°ÏûÑ Î∞©ÏßÄ: noSsr)
  const isViewportMobile = useMediaQuery(theme.breakpoints.down("sm"), { noSsr: true });
  // ‚úÖ UA Í∏∞Î∞ò
  const isDeviceMobile = isMobileUA || isAndroid || isIOS;
  // ‚úÖ ÏµúÏ¢Ö Î™®Î∞îÏùº ÌåêÏ†ï + URL Í∞ïÏ†ú Ïä§ÏúÑÏπò (?m=1 / ?m=0)
  const finalIsMobile = useMemo(() => {
    const params = new URLSearchParams(typeof window !== "undefined" ? window.location.search : "");
    let v = isDeviceMobile || isViewportMobile;
    if (params.get("m") === "1") v = true;
    if (params.get("m") === "0") v = false;
    return v;
  }, [isViewportMobile, isDeviceMobile]);

  // UI state
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState({ open: false, message: "", severity: "info" });

  // ÏßÑÌñâ ÏÉÅÌÉú
  const [activeStep, setActiveStep] = useState(0);

  // Î°úÍ∑∏Ïù∏/ÏÑ§Î¨∏ ÏÉÅÌÉú
  const [loginStatus, setLoginStatus] = useState({
    user_id: "",
    logged_in: false,
    has_survey_data: false,
    has_votes: false,
    status: "",
  });

  // ÏÑ§Î¨∏ ÏûÖÎ†•
  const [activity, setActivity] = useState("");
  const [activityLevel, setActivityLevel] = useState("");
  const [time, setTime] = useState("");
  const [season, setSeason] = useState("");
  const [preference, setPreference] = useState("");

  // Ï∂îÏ≤ú/Ìà¨Ìëú/ML
  const [placeRecs, setPlaceRecs] = useState([]);
  const [currentVotes, setCurrentVotes] = useState([]); // [{ round_number, choice(option_a/b), item_name, item_index }]
  const [mlRecs, setMlRecs] = useState([]);

  // ÎùºÏö¥Îìú UX
  const [currentRoundIdx, setCurrentRoundIdx] = useState(0);
  const [selectedMessage, setSelectedMessage] = useState("");
  const [isAdvancing, setIsAdvancing] = useState(false); // 2Ï¥à ÎåÄÍ∏∞ Ï§ë Ï§ëÎ≥µÌÅ¥Î¶≠ Î∞©ÏßÄ

  useEffect(() => { (async () => { await handleCheckLogin(); })(); /* eslint-disable-next-line */ }, []);

  const showToast = (message, severity = "info") => setToast({ open: true, message, severity });
  const closeToast = () => setToast((t) => ({ ...t, open: false }));

  // üîê Î°úÏª¨ Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏(Ïö∞Ìöå) - ÌîÑÎ°†Ìä∏ Îç∞Î™®
  const adminBypassLogin = () => {
    localStorage.setItem(BYPASS_KEY, "1");
    const dummy = {
      user_id: "dev-admin",
      logged_in: true,
      has_survey_data: false,
      has_votes: false,
      status: "bypass",
    };
    setLoginStatus(dummy);
    setActiveStep(1);
    showToast("Í¥ÄÎ¶¨Ïûê(Î°úÏª¨) Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ‚Äî Î∞±ÏóîÎìú ÎØ∏ÏÇ¨Ïö©", "success");
  };

  // üö™ Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ Î∞îÎ°ú ÏßÑÌñâ(ÌîÑÎ°†Ìä∏ Îç∞Î™®)
  const continueWithoutLogin = () => {
    const guest = {
      user_id: "guest",
      logged_in: false,
      has_survey_data: false,
      has_votes: false,
      status: "guest",
    };
    setLoginStatus(guest);
    setActiveStep(1);
    showToast("Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÏßÑÌñâÌï©ÎãàÎã§.", "info");
  };

  // ---------- 1) Î°úÍ∑∏Ïù∏ ----------
  // GET /api/v1/survey : Î°úÍ∑∏Ïù∏ ÌôïÏù∏ (Î°úÍ∑∏Ïù∏ X ‚Üí Îπà ÏùëÎãµ)
  const handleCheckLogin = async () => {
    setLoading(true);
    try {
      if (localStorage.getItem(BYPASS_KEY) === "1") {
        const dummy = {
          user_id: "dev-admin",
          logged_in: true,
          has_survey_data: false,
          has_votes: false,
          status: "bypass",
        };
        setLoginStatus(dummy);
        setActiveStep(1);
        showToast("Í¥ÄÎ¶¨Ïûê(Î°úÏª¨) Î°úÍ∑∏Ïù∏ Ïú†ÏßÄ Ï§ë", "success");
        return;
      }

      const resp = await apiCall(`${API_BASE}/survey`);
      const loggedIn = !!(resp && (resp.logged_in || resp.user_id));
      setLoginStatus({
        user_id: resp?.user_id || "",
        logged_in: loggedIn,
        has_survey_data: !!resp?.has_survey_data,
        has_votes: !!resp?.has_votes,
        status: resp?.status || "",
      });
      setActiveStep(loggedIn ? 1 : 0);
      showToast(loggedIn ? "Î°úÍ∑∏Ïù∏Îê®" : "Î°úÍ∑∏Ïù∏ ÌïÑÏöî", loggedIn ? "success" : "warning");
    } catch (e) {
      showToast(`Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ${e.message}`, "error");
      setActiveStep(0);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    setLoading(true);
    try {
      localStorage.removeItem(BYPASS_KEY);
      try {
        await apiCall(`${API_BASE}/auth/logout`, { method: "POST" });
      } catch {}
      setLoginStatus({ user_id: "", logged_in: false, has_survey_data: false, has_votes: false, status: "" });
      setActiveStep(0);
      showToast("Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å", "success");
    } catch (e) {
      showToast(`Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  // ---------- 2) ÏÑ§Î¨∏ ----------
  // POST /api/v1/survey/submit : activity_levelÏùÄ "Î≥¥ÌÜµ" ‚Üí "Ï§ëÍ∞Ñ" Îß§Ìïë
  const handleSubmitSurvey = async () => {
    const surveyDataRaw = { activity, activity_level: activityLevel, time, season, preference };
    if (!Object.values(surveyDataRaw).every(Boolean)) {
      showToast("Î™®Îì† ÏÑ§Î¨∏ Ìï≠Î™©ÏùÑ ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.", "warning");
      return;
    }
    const levelMap = { "Î≥¥ÌÜµ": "Ï§ëÍ∞Ñ" };
    const surveyData = { ...surveyDataRaw, activity_level: levelMap[surveyDataRaw.activity_level] || surveyDataRaw.activity_level };

    setLoading(true);
    try {
      const data = await apiCall(`${API_BASE}/survey/submit`, { method: "POST", body: surveyData });
      showToast(data?.message || "ÏÑ§Î¨∏ Ï†úÏ∂ú ÏôÑÎ£å", "success");
      setActiveStep(2); // ÏÑ§Î¨∏ ÌõÑ Ìà¨ÌëúÎ°ú Ïù¥Îèô
    } catch (e) {
      showToast(`ÏÑ§Î¨∏ Ï†úÏ∂ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  // GET /api/v1/survey/data : ÏÉÅÏÑ∏ ÏÉÅÌÉú Ï°∞Ìöå (Í¥ÄÎ¶¨/ÌÖåÏä§Ìä∏)
  const handleSurveyStatus = async () => {
    setLoading(true);
    try {
      const resp = await apiCall(`${API_BASE}/survey/data`);
      const msg = [
        `ÏÉÅÌÉú: ${resp?.status || "-"}`,
        `Ï¥ù Ìà¨Ìëú Ïàò: ${resp?.total_votes ?? 0}`,
        resp?.database_info ? `DB: ${JSON.stringify(resp.database_info)}` : "",
      ].filter(Boolean).join("\n");
      showToast(msg || "ÏÉÅÌÉú Ï°∞Ìöå ÏôÑÎ£å", "info");
    } catch (e) {
      showToast(`ÏÑ§Î¨∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  // ---------- 3) Ï∂îÏ≤ú/Ìà¨Ìëú ----------
  // GET /api/v1/survey/place-recommendations
  const handlePlaceRecs = async () => {
    setLoading(true);
    try {
      const resp = await apiCall(`${API_BASE}/survey/place-recommendations`);
      const mapped = (resp?.recommendations || []).map((r) => ({
        round_number: r.round_number,
        primary: r.option_a?.item || null,
        alternative: r.option_b?.item || null,
      }));
      setPlaceRecs(mapped);
      setCurrentVotes([]);
      setSelectedMessage("");
      setIsAdvancing(false);
      setCurrentRoundIdx(0);
      showToast("Ïû•ÏÜå Ï∂îÏ≤ú ÏôÑÎ£å", "success");
    } catch (e) {
      setPlaceRecs([]);
      setCurrentVotes([]);
      showToast(`Ï∂îÏ≤ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  const selectVote = (roundIndex, which, item) => {
    // which: "primary" | "alternative" ‚Üí ÏÑúÎ≤Ñ choice: "option_a" | "option_b"
    const choice = which === "primary" ? "option_a" : "option_b";
    setCurrentVotes((prev) => {
      const copy = [...prev];
      copy[roundIndex] = {
        round_number: roundIndex + 1,
        choice,
        item_name: item?.name,
        item_index: item?.index,
      };
      return copy;
    });
  };

  const isSelected = (roundIdx, which, name) => {
    const v = currentVotes[roundIdx];
    const want = which === "primary" ? "option_a" : "option_b";
    return v && v.choice === want && v.item_name === name;
  };

  const rounds = useMemo(() => (placeRecs || []).slice(0, 5), [placeRecs]);

  useEffect(() => {
    if (activeStep === 2 && (placeRecs?.length ?? 0) === 0) handlePlaceRecs();
  }, [activeStep]); // eslint-disable-line react-hooks/exhaustive-deps

  // ‚úÖ ÏÑ†ÌÉù ‚Üí Î©îÏãúÏßÄ ÌëúÏãú ‚Üí 2Ï¥à ÌõÑ ÏûêÎèô Ïù¥Îèô
  const handleSelectAndAdvance = (roundIdx, which, item) => {
    if (isAdvancing) return;
    selectVote(roundIdx, which, item);
    setSelectedMessage(`${item?.name || "ÏÑ†ÌÉù Ìï≠Î™©"}ÏùÑ(Î•º) Í≥†Î•¥ÏÖ®ÏäµÎãàÎã§ ‚úÖ`);
    setIsAdvancing(true);
    setTimeout(() => {
      setSelectedMessage("");
      setIsAdvancing(false);
      if (roundIdx < rounds.length - 1) {
        setCurrentRoundIdx(roundIdx + 1);
      } else {
        showToast("ÎßàÏßÄÎßâ ÎùºÏö¥Îìú ÏÑ†ÌÉù ÏôÑÎ£å! 'Ìà¨Ìëú Ï†úÏ∂ú'ÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.", "info");
      }
    }, 2000);
  };

  // POST /api/v1/survey/votes : ÎùºÏö¥ÎìúÎ≥Ñ Í∞úÎ≥Ñ Ï†úÏ∂ú(Ïä§Ìéô)
  const handleSubmitVotes = async () => {
    if (!rounds?.length) { showToast("Ï∂îÏ≤úÏù¥ ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", "warning"); return; }
    if (currentVotes.filter(Boolean).length < rounds.length) { showToast("Î™®Îì† ÎùºÏö¥ÎìúÏóê Ìà¨ÌëúÌï¥ Ï£ºÏÑ∏Ïöî.", "warning"); return; }
    setLoading(true);
    try {
      for (const v of currentVotes) {
        await apiCall(`${API_BASE}/survey/votes`, { method: "POST", body: v });
      }
      showToast("Ìà¨Ìëú Ï†úÏ∂ú ÏôÑÎ£å", "success");
      setActiveStep(3);
    } catch (e) {
      showToast(`Ìà¨Ìëú Ï†úÏ∂ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  // ---------- 4) ML ----------
  // GET /api/v1/survey/ml-recommendations?k=20&user_id=...
  const handleMLRecs = async () => {
    setLoading(true);
    try {
      const uid = loginStatus?.user_id;
      if (!uid) {
        showToast("user_idÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. Î®ºÏ†Ä Î°úÍ∑∏Ïù∏Ìï¥ Ï£ºÏÑ∏Ïöî.", "warning");
        setLoading(false);
        return;
      }
      const resp = await apiCall(`${API_BASE}/survey/ml-recommendations?user_id=${encodeURIComponent(uid)}&k=20`);
      setMlRecs(resp?.recommendations || []);
      showToast(resp?.message || "ML Ï∂îÏ≤ú ÏôÑÎ£å (20Í≥≥)", "success");
    } catch (e) {
      showToast(`ML Ï∂îÏ≤ú Ïã§Ìå®: ${e.message}`, "error");
    } finally {
      setLoading(false);
    }
  };

  // ---------- 6) spot-recommendÎ°ú Ïù¥Îèô ----------
  const goSpotRecommend = () => {
    if (!mlRecs?.length) { showToast("Î®ºÏ†Ä ML Ï∂îÏ≤úÏùÑ Î∞õÏïÑÏ£ºÏÑ∏Ïöî.", "warning"); return; }
    const attractions = mlRecs.map((p, i) => ({
      id: p.item_id || p.content_id || p.ml_index || String(i + 1),
      name: p.item_name,
      address: p.address,
      rating: p.rating,
      category: p.category,
      description: p.reason,
      image: p.photoUrl || p.image || "",
      ml_score: p.score ?? null,
      source: p.category_type || "ml",
      reason: p.reason || "",
    }));
    navigate("/tourist-spot-recommend", {
      state: {
        user_id: loginStatus?.user_id || "",
        attractions,
        isMlList: true,
        source: "ml",
      },
    });
  };

  // ---------- Ïä§ÌÖù Ï°∞Ï†à ----------
  const canGoNext = useMemo(() => {
    switch (activeStep) {
      case 0: return loginStatus.logged_in || loginStatus.status === "bypass" || loginStatus.status === "guest";
      case 1: return [activity, activityLevel, time, season, preference].every(Boolean);
      case 2: return rounds.length > 0 && currentVotes.filter(Boolean).length === rounds.length;
      case 3: return mlRecs.length > 0;
      default: return true;
    }
  }, [activeStep, loginStatus, activity, activityLevel, time, season, preference, rounds, currentVotes, mlRecs]);

  const handleNext = () => setActiveStep((s) => Math.min(s + 1, steps.length - 1));
  const handleBack = () => setActiveStep((s) => Math.max(s - 1, 0));

  // =======================
  //  Desktop Layout
  // =======================
  const DesktopView = () => (
    <>
      {/* Ìó§Îçî */}
      <Card elevation={0} sx={{ mb: 4, border: `1px solid ${tone.border}`, background: `linear-gradient(120deg, ${tone.primarySoft}, #F0FDFA)` }}>
        <CardContent>
          <Stack direction="row" justifyContent="space-between" alignItems="center" spacing={2}>
            <Box>
              <Typography variant="h4" fontWeight={800} color={tone.primary}>üó∫Ô∏è WhereWeGo ÏÑ§Î¨∏ ÏãúÏä§ÌÖú</Typography>
              <Typography variant="body1" sx={{ opacity: 0.8, mt: 0.5 }}>JWT ÌÜ†ÌÅ∞ Í∏∞Î∞ò Î≥¥Ïïà ÏÑ§Î¨∏¬∑Ï∂îÏ≤ú ÌÖåÏä§Ìä∏</Typography>
            </Box>
            <Stack direction="row" spacing={1}>
              <Chip color={loginStatus.logged_in || loginStatus.status === "bypass" ? "success" : "default"} label={(loginStatus.logged_in || loginStatus.status === "bypass") ? "Î°úÍ∑∏Ïù∏Îê®" : "Î°úÍ∑∏ÏïÑÏõÉ"} variant="filled" />
              {loading && <CircularProgress size={24} />}
            </Stack>
          </Stack>
        </CardContent>
      </Card>

      {/* Ïä§ÌÖùÌçº */}
      <Card variant="outlined" sx={{ mb: 3, borderColor: tone.border }}>
        <CardContent>
          <Stepper activeStep={activeStep} alternativeLabel>
            {steps.map((label) => (
              <Step key={label}><StepLabel>{label}</StepLabel></Step>
            ))}
          </Stepper>
        </CardContent>
      </Card>

      {/* Î≥∏Î¨∏ */}
      <AnimatePresence mode="wait" initial={false}>
        {/* STEP 0 */}
        {activeStep === 0 && (
          <motion.div
            key="step-login"
            variants={pageVariants}
            initial="initial"
            animate="in"
            exit="out"
            transition={pageTransition}
          >
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card variant="outlined" sx={{ borderColor: tone.border }}>
                  <CardHeader avatar={<LoginIcon color="primary" />} title="1. Î°úÍ∑∏Ïù∏" subheader="Google / Kakao ÎòêÎäî Í¥ÄÎ¶¨Ïûê(Î°úÏª¨) Î°úÍ∑∏Ïù∏, ÌòπÏùÄ Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÏßÑÌñâ" />
                  <CardContent>
                    {(loginStatus.logged_in || loginStatus.status === "bypass") ? (
                      <Alert icon={<CheckCircleIcon fontSize="inherit" />} severity="success" sx={{ mb: 2 }}>
                        Î°úÍ∑∏Ïù∏Îê® ‚Äî ÏÑ§Î¨∏: <b>{loginStatus.has_survey_data ? "ÏôÑÎ£å" : "ÎØ∏ÏôÑÎ£å"}</b>, Ìà¨Ìëú: <b>{loginStatus.has_votes ? "ÏôÑÎ£å" : "ÎØ∏ÏôÑÎ£å"}</b>
                      </Alert>
                    ) : (
                      <Alert icon={<ErrorIcon fontSize="inherit" />} severity="warning" sx={{ mb: 2 }}>
                        Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.
                      </Alert>
                    )}
                    <Stack direction={{ xs: "column", sm: "row" }} spacing={1}>
                      <Button type="button" startIcon={<GoogleIcon />} variant="contained" color="primary" onClick={() => (window.location.href = GOOGLE_LOGIN_URL)}>Google Î°úÍ∑∏Ïù∏</Button>
                      <Button type="button" startIcon={<ChatBubbleIcon />} variant="outlined" color="primary" onClick={() => (window.location.href = KAKAO_LOGIN_URL)}>Kakao Î°úÍ∑∏Ïù∏</Button>
                      <Button type="button" variant="outlined" onClick={adminBypassLogin}>Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏(Î°úÏª¨)</Button>
                      <Button type="button" variant="text" onClick={continueWithoutLogin}>Î°úÍ∑∏Ïù∏ ÏóÜÏù¥ ÏßÑÌñâ</Button>
                    </Stack>
                  </CardContent>
                  <CardActions sx={{ justifyContent: "space-between" }}>
                    <Stack direction="row" spacing={1}>
                      <Button type="button" size="small" onClick={handleCheckLogin}>ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®</Button>
                      <Button type="button" size="small" variant="contained" onClick={() => setActiveStep(1)}>Îã§ÏùåÏúºÎ°ú</Button>
                    </Stack>
                    <Button type="button" size="small" color="error" startIcon={<LogoutIcon />} onClick={handleLogout}>Î°úÍ∑∏ÏïÑÏõÉ</Button>
                  </CardActions>
                </Card>
              </Grid>
            </Grid>
          </motion.div>
        )}

        {/* STEP 1 */}
        {activeStep === 1 && (
          <motion.div key="step-survey" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card variant="outlined" sx={{ borderColor: tone.border }}>
                  <CardHeader avatar={<ChecklistIcon color="primary" />} title="2. Í¥ÄÍ¥ë ÏÑ†Ìò∏ÎèÑ Ï°∞ÏÇ¨" subheader="Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäî ÏöîÏÜåÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />
                  <CardContent>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth>
                          <InputLabel>ÌôúÎèô Ïú†Ìòï</InputLabel>
                          <Select label="ÌôúÎèô Ïú†Ìòï" value={activity} onChange={(e) => setActivity(e.target.value)}>
                            <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                            {["ÏûêÏó∞ÌíçÍ≤Ω", "ÏûêÏó∞ÏÇ∞Î¶º", "Í¥ÄÎûåÎ∞èÏ≤¥Ìóò", "Ìú¥Ïñë", "ÌÖåÎßàÍ±∞Î¶¨", "ÏòàÏà†Í∞êÏÉÅ", "Í≥µÏó∞Í¥ÄÎûå", "Ìä∏Î†àÌÇπ"].map((v) => (<MenuItem key={v} value={v}>{v}</MenuItem>))}
                          </Select>
                        </FormControl>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth>
                          <InputLabel>ÌôúÎèôÏÑ±</InputLabel>
                          <Select label="ÌôúÎèôÏÑ±" value={activityLevel} onChange={(e) => setActivityLevel(e.target.value)}>
                            <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                            <MenuItem value="ÎÇÆÏùå">ÎÇÆÏùå</MenuItem>
                            <MenuItem value="Î≥¥ÌÜµ">Î≥¥ÌÜµ</MenuItem>
                            <MenuItem value="ÎÜíÏùå">ÎÜíÏùå</MenuItem>
                          </Select>
                        </FormControl>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth>
                          <InputLabel>ÏãúÍ∞ÑÎåÄ</InputLabel>
                          <Select label="ÏãúÍ∞ÑÎåÄ" value={time} onChange={(e) => setTime(e.target.value)}>
                            <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                            {["Ïò§Ï†Ñ", "Ïò§ÌõÑ", "Ï†ÄÎÖÅ", "Î∞§"].map(v => <MenuItem key={v} value={v}>{v}</MenuItem>)}
                          </Select>
                        </FormControl>
                      </Grid>
                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth>
                          <InputLabel>Í≥ÑÏ†à</InputLabel>
                          <Select label="Í≥ÑÏ†à" value={season} onChange={(e) => setSeason(e.target.value)}>
                            <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                            {["Î¥Ñ", "Ïó¨Î¶Ñ", "Í∞ÄÏùÑ", "Í≤®Ïö∏"].map(v => <MenuItem key={v} value={v}>{v}</MenuItem>)}
                          </Select>
                        </FormControl>
                      </Grid>
                      <Grid item xs={12}>
                        <FormControl fullWidth>
                          <InputLabel>Ï§ëÏöî ÏöîÏÜå</InputLabel>
                          <Select label="Ï§ëÏöî ÏöîÏÜå" value={preference} onChange={(e) => setPreference(e.target.value)}>
                            <MenuItem value=""><em>ÏÑ†ÌÉù</em></MenuItem>
                            <MenuItem value="ÌôúÎèôÏÑ±">ÌôúÎèôÏÑ±</MenuItem>
                            <MenuItem value="ÏãúÍ∞ÑÎåÄ">ÏãúÍ∞ÑÎåÄ</MenuItem>
                          </Select>
                        </FormControl>
                      </Grid>
                    </Grid>
                  </CardContent>
                  <CardActions sx={{ justifyContent: "space-between" }}>
                    <Button type="button" disabled={activeStep === 0} onClick={handleBack}>Îí§Î°ú</Button>
                    <Stack direction="row" spacing={1}>
                      <Button type="button" onClick={handleSurveyStatus} startIcon={<PendingIcon />}>ÏÑ§Î¨∏ ÏÉÅÌÉú</Button>
                      <Button type="button" onClick={handleSubmitSurvey} variant="contained" startIcon={<SendIcon />}>ÏÑ§Î¨∏ Ï†úÏ∂ú</Button>
                      <Button type="button" disabled={!canGoNext} variant="outlined" onClick={() => setActiveStep(2)}>Îã§Ïùå</Button>
                    </Stack>
                  </CardActions>
                </Card>
              </Grid>
            </Grid>
          </motion.div>
        )}

        {/* STEP 2 - Ìà¨Ìëú (Í∞ÄÎ°ú 2Î∂ÑÌï† Í≥†Ï†ï, Îçî ÌÅº/Í∞úÏÑ± ÎîîÏûêÏù∏, ÏÑ†ÌÉù Î©îÏãúÏßÄ 2Ï¥à ÌõÑ ÏûêÎèô Ïù¥Îèô) */}
        {activeStep === 2 && (
          <motion.div key="step-vote" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card variant="outlined" sx={{ borderColor: tone.border, overflow: "hidden" }}>
                  <CardHeader
                    avatar={<HowToVoteIcon color="primary" />}
                    title="3. Ìà¨Ìëú (ÎùºÏö¥Îìú ÏÑ†ÌÉù)"
                    subheader="Ï∂îÏ≤úÎêú Îëê Ïû•ÏÜå Ï§ë ÏÑ†Ìò∏ÌïòÎäî Í≥≥ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
                  />
                  <CardContent sx={{ pt: 0 }}>
                    {!rounds.length ? (
                      <Alert severity="info">Ï∂îÏ≤úÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî‚Ä¶ Ïû†ÏãúÎßåÏöî.</Alert>
                    ) : (
                      <>
                        <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 2, px: 0.5 }}>
                          <Typography variant="h5" fontWeight={900}>
                            ÎùºÏö¥Îìú {currentRoundIdx + 1} / {rounds.length}
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.75 }}>
                            {currentVotes[currentRoundIdx]?.choice
                              ? `ÌòÑÏû¨ ÏÑ†ÌÉù: ${currentVotes[currentRoundIdx].item_name}`
                              : "ÏïÑÏßÅ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏñ¥Ïöî"}
                          </Typography>
                        </Stack>

                        {/* ÏÑ†ÌÉù ÏïàÎÇ¥ Î©îÏãúÏßÄ (2Ï¥à ÌëúÏãú) */}
                        <AnimatePresence>
                          {selectedMessage && (
                            <motion.div
                              initial={{ opacity: 0, y: -6 }}
                              animate={{ opacity: 1, y: 0 }}
                              exit={{ opacity: 0, y: -6 }}
                              transition={{ duration: 0.25 }}
                            >
                              <Alert severity="success" sx={{ my: 1.5, fontWeight: 700 }}>
                                {selectedMessage}
                              </Alert>
                            </motion.div>
                          )}
                        </AnimatePresence>

                        {/* Í∞ÄÎ°ú 2Î∂ÑÌï† Í≥†Ï†ï: xs={6} Î°ú Î™®Î∞îÏùºÏóêÏÑúÎèÑ Ï¢å/Ïö∞ Î∞∞Ïπò */}
                        {(() => {
                          const round = rounds[currentRoundIdx] || {};
                          return (
                            <Grid container spacing={2}>
                              <Grid item xs={6}>
                                <BigChoiceCard
                                  label="A"
                                  place={round?.primary}
                                  selected={isSelected(currentRoundIdx, "primary", round?.primary?.name)}
                                  onSelect={() => handleSelectAndAdvance(currentRoundIdx, "primary", round?.primary)}
                                  compact={false}
                                  disabled={isAdvancing}
                                />
                              </Grid>
                              <Grid item xs={6}>
                                <BigChoiceCard
                                  label="B"
                                  place={round?.alternative}
                                  selected={isSelected(currentRoundIdx, "alternative", round?.alternative?.name)}
                                  onSelect={() => handleSelectAndAdvance(currentRoundIdx, "alternative", round?.alternative)}
                                  compact={false}
                                  disabled={isAdvancing}
                                />
                              </Grid>
                            </Grid>
                          );
                        })()}
                      </>
                    )}
                  </CardContent>

                  <CardActions sx={{ px: 2, pb: 2, justifyContent: "space-between" }}>
                    <Stack direction="row" spacing={1}>
                      <Button
                        type="button"
                        startIcon={<ArrowBack />}
                        disabled={currentRoundIdx === 0 || isAdvancing}
                        onClick={() => setCurrentRoundIdx((i) => Math.max(0, i - 1))}
                      >
                        Ïù¥Ï†Ñ ÎùºÏö¥Îìú
                      </Button>
                      <Button
                        type="button"
                        variant="outlined"
                        onClick={() => setCurrentRoundIdx((i) => Math.min((rounds.length - 1), i + 1))}
                        disabled={currentRoundIdx >= rounds.length - 1 || isAdvancing}
                      >
                        Îã§Ïùå ÎùºÏö¥Îìú
                      </Button>
                    </Stack>
                    <Button
                      type="button"
                      onClick={handleSubmitVotes}
                      variant="contained"
                      startIcon={<HowToVoteIcon />}
                      disabled={!rounds.length || isAdvancing}
                    >
                      Ìà¨Ìëú Ï†úÏ∂ú
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            </Grid>
          </motion.div>
        )}

        {/* STEP 3 */}
        {activeStep === 3 && (
          <motion.div key="step-ml" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card variant="outlined" sx={{ borderColor: tone.border }}>
                  <CardHeader avatar={<ScienceIcon color="primary" />} title="4. ML Î™®Îç∏ Ï∂îÏ≤ú (20Í≥≥)" subheader="ÏÑ§Î¨∏Í≥º Ìà¨ÌëúÎ•º Í∏∞Î∞òÏúºÎ°ú Ï∂îÏ≤ú" />
                  <CardActions sx={{ px: 2, pt: 0 }}>
                    <Button type="button" variant="outlined" onClick={handleMLRecs} startIcon={<ScienceIcon />}>ML Ï∂îÏ≤ú Î∞õÍ∏∞</Button>
                    <Box sx={{ flexGrow: 1 }} />
                    <Button type="button" onClick={handleBack}>Îí§Î°ú</Button>
                    <Button type="button" disabled={!canGoNext} variant="outlined" onClick={handleNext}>Îã§Ïùå</Button>
                  </CardActions>
                  <CardContent sx={{ maxHeight: 420, overflow: "auto" }}>
                    {!mlRecs.length ? (
                      <Alert severity="info">ÏïÑÏßÅ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§. ‚ÄúML Ï∂îÏ≤ú Î∞õÍ∏∞‚ÄùÎ•º ÎàåÎü¨Ï£ºÏÑ∏Ïöî.</Alert>
                    ) : (
                      <Stack spacing={1.5}>
                        {mlRecs.map((p, i) => (
                          <Box
                            key={`${p.item_id || p.content_id || p.ml_index || "rec"}-${i}`}
                            sx={{ p: 1.25, border: `1px solid ${tone.border}`, borderRadius: 1.5, bgcolor: tone.paper }}
                          >
                            <Typography variant="subtitle2" fontWeight={700}>
                              {i + 1}. {p.item_name || "Ïù¥Î¶Ñ ÏóÜÏùå"}
                            </Typography>
                            <Typography variant="body2">üè∑Ô∏è {p.category || "-"}</Typography>
                            <Typography variant="body2">üìä Ï†êÏàò: {p.score != null ? (typeof p.score === "number" ? p.score.toFixed(4) : p.score) : "N/A"}</Typography>
                            {p.category_type && <Typography variant="body2">üß© Î∂ÑÎ•ò: {p.category_type}</Typography>}
                            {!!p.reason && (
                              <Typography variant="body2" sx={{ mt: 0.5 }}>üß† Ï∂îÏ≤ú Ïù¥Ïú†: {p.reason}</Typography>
                            )}
                          </Box>
                        ))}
                      </Stack>
                    )}
                  </CardContent>
                  <CardActions sx={{ px: 2, pt: 0 }}>
                    <Box sx={{ flexGrow: 1 }} />
                    <Button type="button" variant="contained" onClick={goSpotRecommend}>Í¥ÄÍ¥ëÏßÄ Í≥†Î•¥Îü¨ Í∞ÄÍ∏∞</Button>
                  </CardActions>
                </Card>
              </Grid>
            </Grid>
          </motion.div>
        )}

        {/* STEP 4 */}
        {activeStep === 4 && (
          <motion.div key="step-admin" variants={pageVariants} initial="initial" animate="in" exit="out" transition={pageTransition}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card variant="outlined" sx={{ borderColor: tone.border }}>
                  <CardHeader title="5. Í¥ÄÎ¶¨ / 6. ÌÖåÏä§Ìä∏" />
                  <CardActions sx={{ px: 2, pb: 2, gap: 1, flexWrap: "wrap" }}>
                    <Button type="button" variant="outlined" onClick={handleSurveyStatus}>/survey/data Ï°∞Ìöå</Button>
                    <Box sx={{ flexGrow: 1 }} />
                    <Button type="button" onClick={handleBack}>Îí§Î°ú</Button>
                  </CardActions>
                </Card>
              </Grid>
            </Grid>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );

  // =======================
  //  Mobile Layout (Ìó§Îçî¬∑ÎÑ§ÎπÑÎßå Î™®Î∞îÏùº ÏµúÏ†ÅÌôî, ÎùºÏö¥ÎìúÎèÑ Í∞ÄÎ°ú 2Î∂ÑÌï† Ïú†ÏßÄ)
  // =======================
  const MobileView = () => (
    <>
      {/* ÏÉÅÎã® Í≥†Ï†ïÎ∞î */}
      <Paper
        elevation={0}
        sx={{
          position: "sticky",
          top: 0,
          zIndex: 10,
          borderBottom: `1px solid ${tone.border}`,
          background: `linear-gradient(120deg, ${tone.primarySoft}, #F8FFFE)`
        }}
      >
        <Container maxWidth={false} disableGutters sx={{ py: 1.25, px: 1.25 }}>
          <Stack direction="row" alignItems="center" spacing={1}>
            <Typography variant="h6" fontWeight={800} color={tone.primary} sx={{ flex: 1 }}>
              WhereWeGo
            </Typography>
            <Chip size="small" color={(loginStatus.logged_in || loginStatus.status === "bypass") ? "success" : "default"} label={(loginStatus.logged_in || loginStatus.status === "bypass") ? "Î°úÍ∑∏Ïù∏Îê®" : "Î°úÍ∑∏ÏïÑÏõÉ"} />
            {loading && <CircularProgress size={18} />}
          </Stack>
          <MobileStepper
            variant="progress"
            steps={steps.length}
            position="static"
            activeStep={activeStep}
            backButton={<Button type="button" size="small" onClick={handleBack} disabled={activeStep === 0}><ArrowBack fontSize="small" />Îí§Î°ú</Button>}
            nextButton={<Button type="button" size="small" onClick={handleNext} disabled={!canGoNext || activeStep === steps.length - 1}>Îã§Ïùå<ArrowForward fontSize="small" /></Button>}
            sx={{ bgcolor: "transparent", px: 0, mt: 1 }}
          />
        </Container>
      </Paper>

      {/* Î≥∏Î¨∏ */}
      <Container maxWidth={false} disableGutters sx={{ py: 2, px: 1.25 }}>
        {/* Îç∞Ïä§ÌÅ¨ÌÉëÍ≥º ÎèôÏùºÌïú Î≥∏Î¨∏ÏùÑ ÏÇ¨Ïö© (Ìà¨Ìëú ÏÑπÏÖòÏùÄ xs=6Î°ú Í∞ÄÎ°ú 2Î∂ÑÌï† Ïú†ÏßÄ) */}
        <DesktopView />
      </Container>
    </>
  );

  // ---------- Î†åÎçî ----------
  return (
    <Box sx={{ bgcolor: tone.subtle, minHeight: "100dvh", overflowX: "clip", width: "100%" }}>
      {finalIsMobile ? (
        <MobileView />
      ) : (
        <Container maxWidth="lg" sx={{ py: 6 }}>
          <DesktopView />
        </Container>
      )}

      {/* Í≥µÌÜµ ÌÜ†Ïä§Ìä∏ */}
      <Snackbar open={toast.open} autoHideDuration={5000} onClose={closeToast} anchorOrigin={{ vertical: "bottom", horizontal: "center" }}>
        <Alert onClose={closeToast} severity={toast.severity} sx={{ width: "100%" }}>
          <span style={{ whiteSpace: "pre-line" }}>{toast.message}</span>
        </Alert>
      </Snackbar>
    </Box>
  );
}
